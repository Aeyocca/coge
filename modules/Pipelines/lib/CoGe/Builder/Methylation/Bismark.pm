package CoGe::Builder::Methylation::Bismark;

use v5.14;
use strict;
use warnings;

use Data::Dumper qw(Dumper);
use File::Spec::Functions qw(catdir catfile);
use CoGe::Accessory::Utils qw(to_filename);
use CoGe::Accessory::Web qw(get_defaults);
use CoGe::Accessory::Workflow;
use CoGe::Core::Storage qw(get_genome_file get_workflow_paths);
use CoGe::Core::Metadata qw(to_annotations);
use CoGe::Builder::CommonTasks;

our $CONF = CoGe::Accessory::Web::get_defaults();

BEGIN {
    use vars qw ($VERSION @ISA @EXPORT @EXPORT_OK);
    require Exporter;

    $VERSION = 0.1;
    @ISA     = qw(Exporter);
    @EXPORT  = qw(build);
}

sub build {
    my $opts = shift;
    my $genome = $opts->{genome};
    my $user = $opts->{user};
    my $input_file = $opts->{input_file}; # path to bam file
    my $metadata = $opts->{metadata};
    my $additional_metadata = $opts->{additional_metadata};
    my $wid = $opts->{wid};
    my $read_params = $opts->{read_params};
    my $methylation_params = $opts->{methylation_params};

    # Setup paths
    my ($staging_dir, $result_dir) = get_workflow_paths($user->name, $wid);
    my $gid = $genome->id;
    my $FASTA_CACHE_DIR = catdir($CONF->{CACHEDIR}, $gid, "fasta");
    die "ERROR: CACHEDIR not specified in config" unless $FASTA_CACHE_DIR;

    # Set metadata for the pipeline being used
    my $annotations = generate_additional_metadata($params);
    my @annotations2 = CoGe::Core::Metadata::to_annotations($additional_metadata);
    push @$annotations, @annotations2;

    #
    # Build the workflow
    #
    my @tasks;

    push @tasks, create_deduplicate_job( 
        bam_file => $input_file,
        read_type => ,
        staging_dir =>
    );
    
    push @tasks, create_extract_methylation_job( 
        bam_file => $input_file,
        read_type => $read_params->{read_type},
        staging_dir => $staging_dir,
        '--ignore' => $methylation_params->{'--ignore'},
        '--ignore_r2' => $methylation_params->{'--ignore_r2'},
        '--ignore_3prime' => $methylation_params->{'--ignore_3prime'},
        '--ignore_3prime_r2' => $methylation_params->{'--ignore_3prime_r2'}
    );

    # Save outputs for retrieval by downstream tasks
#    my @done_files; = (
#        $load_bed_task->{outputs}->[0]
#    );
#    push @done_files, $load_csv_task->{outputs}->[0] if ($include_csv);
    
    return {
        tasks => \@tasks,
#        done_files => \@done_files
    };
}

sub generate_additional_metadata {
    my $params = shift;
    
    my @annotations;
#    push @annotations, qq{https://genomevolution.org/wiki/index.php/Expression_Analysis_Pipeline||note|Generated by CoGe's RNAseq Analysis Pipeline};
#    push @annotations, qq{note|samtools depth -q } . $params->{'-q'};
#    push @annotations, qq{note|cufflinks (default parameters)} if $isAnnotated;

    return \@annotations;
}

sub create_deduplicate_job {
    my %opts = @_;
    my $bam_file = $opts{bam_file};
    my $read_type = $opts{read_type} // 'single';
    my $staging_dir = $opts{staging_dir};
    
    my $cmd = catfile($CONF->{BISMARK_DIR}, 'deduplicate_bismark');
    die "ERROR: BISMARK_DIR is not in the config." unless $cmd;
    
    my $args;
    if ($read_type eq 'paired') {
        push @$args, ['-p', '', 0];
    }
    else { # single-ended
        push @$args, ['-s', '', 0];
    }
    
    push @$args, ['--bam', $bam_file, 0];
    
    return {
        cmd => $cmd,
        script => undef,
        args => $args,
        inputs => [
            $bam_file
        ],
        outputs => [
            catfile($staging_dir, "$name.bwameth.c2t"),
        ],
        description => "Deduplicating PCR artifacts..."
    };
}

sub create_extract_methylation_job {
    my %opts = @_;
    my $bam_file = $opts{bam_file};
    my $read_type = $opts{read_type} // 'single';
    my $ignore = $opts{'--ignore'} // 0;
    my $ignore_r2 = $opts{'--ignore_r2'} // 0;
    my $ignore_3prime = $opts{'--ignore_3prime'} // 0;
    my $ignore_3prime_r2 = $opts{'--ignore_3prime_r2'} // 0;
    
    my $cmd = catfile($CONF->{BISMARK_DIR}, 'bismark_methylation_extractor');
    die "ERROR: BISMARK_DIR is not in the config." unless $cmd;
    
    my $args = [
        ['--ignore', $ignore, 0],
        ['--ignore_3prime', $ignore_3prime, 0]
    ];
    
    if ($read_type eq 'paired') {
        push @$args, ['-p', '', 0];
        push @$args, ['--ignore_r2', $ignore_r2, 0];
        push @$args, ['--ignore_3prime_r2', $ignore_3prime_r2, 0];
    }
    
    push @$args, [$bam_file, '', 0];
    
    return {
        cmd => $cmd,
        script => undef,
        args => $args,
        inputs => [
            $bam_file
        ],
        outputs => [
            catfile($BWAMETH_CACHE_DIR, "$name.bwameth.c2t"),
            catfile($BWAMETH_CACHE_DIR, "$name.bwameth.c2t.amb"),
            catfile($BWAMETH_CACHE_DIR, "$name.bwameth.c2t.ann"),
            catfile($BWAMETH_CACHE_DIR, "$name.bwameth.c2t.bwt"),
            catfile($BWAMETH_CACHE_DIR, "$name.bwameth.c2t.pac"),
            catfile($BWAMETH_CACHE_DIR, "$name.bwameth.c2t.sa")
        ],
        description => "Extracting methylation status..."
    };
}

sub create_coge_import_job {
    my %opts = @_;
    my $ot_input_file = $opts{ot_input_file};
    my $ob_input_file = $opts{ob_input_file};
    my $min_coverage = $opts{min_coverage};
    my $staging_dir = $opts{staging_dir};
    
    my $cmd = catfile($CONF->{SCRIPTDIR}, 'coge-import_bismark.py');
    die "ERROR: SCRIPTDIR is not in the config." unless $cmd;
    
    return {
        cmd => $cmd,
        script => undef,
        args => [
            ['-u', 'f', 0],
            ['-c', $min_coverage, 0],
            ['--OT', $ot_input_file, 0],
            ['--OB', $ob_input_file, 0],
            ['-o', $output_file, 0]
        ],
        inputs => [
            $ot_input_file,
            $ob_input_file
        ],
        outputs => [
            catfile($staging_dir, $output_file),
        ],
        description => "Converting data..."
    };
}

1;