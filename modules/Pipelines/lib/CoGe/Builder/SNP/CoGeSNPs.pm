package CoGe::Builder::SNP::CoGeSNPs;

use Moose;
extends 'CoGe::Builder::SNP::SNPFinder';

use Data::Dumper qw(Dumper);
use File::Spec::Functions qw(catfile catdir);

use CoGe::Accessory::Web;
use CoGe::Accessory::Utils;
use CoGe::Core::Storage;
use CoGe::Core::Metadata;
use CoGe::Exception::Generic;

sub build {
    my $self = shift;
    my $bam_file = shift;

    my $gid = $self->request->genome->id;

    #
    # Build workflow
    #

    $self->add_task(
        $self->reheader_fasta($gid)
    );
    my $reheader_fasta = $self->previous_output;
    
    $self->add_task(
        $self->index_fasta($reheader_fasta)
    );
    
    $self->add_task(
        $self->samtools_mpileup(
            reheader_fasta => $reheader_fasta,
            bam_file => $bam_file
        )
    );

    $self->vcf($self->previous_output);
    
    my $annotations = generate_additional_metadata();
    my @annotations2 = CoGe::Core::Metadata::to_annotations($self->params->{additional_metadata});
    push @$annotations, @annotations2;

    $self->add_task(
        $self->load_vcf(
            gid => $gid,
            vcf => $self->vcf,
            annotations => $annotations
        )
    );
}

sub samtools_mpileup {
    my $self = shift;
    my %opts = @_;
    my $reheader_fasta = $opts{reheader_fasta};
    my $bam_file       = $opts{bam_file};

    my $params = $self->params->{snp_params};
    my $min_read_depth   = $params->{'min-read-depth'} || 10;
    my $min_base_quality = $params->{'min-base-quality'} || 20;
    my $min_allele_freq  = $params->{'min-allele-freq'} || 0.1;
    my $min_allele_count = $params->{'min-allele-count'} || 4;
    my $scale            = $params->{scale} || 32;
    
    my $samtools = get_command_path('SAMTOOLS');
    my $filter_script = catfile($self->conf->{SCRIPTDIR}, 'pileup_SNPs.pl');
    $filter_script .= ' min_read_depth=' . $min_read_depth;
    $filter_script .= ' min_base_quality=' . $min_base_quality;
    $filter_script .= ' min_allele_freq=' . $min_allele_freq;
    $filter_script .= ' min_allele_count=' . $min_allele_count;
    $filter_script .= ' quality_scale=' . $scale;
    
    my $output_file = 'snps.vcf';

    return {
        cmd => $samtools,
        args => [
            ['mpileup', '',              0],
            ['-f',      '',              0],
            ['',        $reheader_fasta, 1],
            ['',        $bam_file,       1],
            ['|',       $filter_script,  0],
            ['>',       $output_file,    0]
        ],
        inputs => [
            $reheader_fasta,
            $reheader_fasta.'.fai',
            $bam_file
        ],
        outputs => [
            catfile($self->staging_dir, $output_file)
        ],
        description => "Identifying SNPs using the CoGe method"
    };
}

sub generate_additional_metadata {
    my $self = shift;
    my $params = $self->params->{snp_params};
    my $min_read_depth   = $params->{'min-read-depth'} || 10;
    my $min_base_quality = $params->{'min-base-quality'} || 20;
    my $min_allele_freq  = $params->{'min-allele-freq'} || 0.1;
    my $min_allele_count = $params->{'min-allele-count'} || 4;
    my $scale            = $params->{scale} || 32;

    my @annotations;
    push @annotations, qq{https://genomevolution.org/wiki/index.php?title=LoadExperiment||note|Generated by CoGe's NGS Analysis Pipeline};
    push @annotations, (
        qq{note|SNPs generated using CoGe method},
        qq{note|Minimum read depth of $min_read_depth},
        qq{note|Minimum high-quality (PHRED >= $min_base_quality) allele count of $min_allele_count, FASTQ encoding $scale},
        qq{note|Minimum allele frequency of } . $min_allele_freq * 100 . '%'
    );
    return \@annotations;
}

1;
