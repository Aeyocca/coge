package CoGe::Builder::SNP::Samtools;

use Moose;
extends 'CoGe::Builder::SNP::SNPFinder';

use Carp;
use Data::Dumper;
use File::Spec::Functions qw(catdir catfile);
use File::Basename qw(basename);

use CoGe::Accessory::Web;
use CoGe::Accessory::Utils;
use CoGe::Core::Storage;
use CoGe::Core::Metadata;
use CoGe::Exception::Generic;

sub build {
    my $self = shift;
    my %opts = @_;
    my $bam_file = shift @{$opts{data_files}};

    my $gid = $self->request->genome->id;

    my $annotations = generate_additional_metadata($self->params->{snp_params});
    my @annotations2 = CoGe::Core::Metadata::to_annotations($self->params->{additional_metadata});
    push @$annotations, @annotations2;

#    my $conf = {
#        staging_dir => $staging_dir,
#        result_dir  => $result_dir,
#
#        bam         => $input_file,
#        fasta       => catfile($FASTA_CACHE_DIR, $reheader_fasta),
#        bcf         => catfile($staging_dir, qq[snps.raw.bcf]),
#        vcf         => catfile($staging_dir, qq[snps.flt.vcf]),
#
#        username    => $user->name,
#        metadata    => $metadata,
#        wid         => $wid,
#        gid         => $gid,
#
#        method      => 'SAMtools',
#
#        params      => $params,
#
#        annotations => $annotations
#    };

    #
    # Build workflow
    #

    $self->add_task(
        $self->reheader_fasta($gid)
    );
    my $reheader_fasta = $self->previous_output;

    $self->add_task(
        $self->index_fasta($reheader_fasta)
    );

    $self->add_task(
        $self->find_snps(
            $reheader_fasta,
            $bam_file
        )
    );

    $self->add_task(
        $self->filter_snps($self->previous_output)
    );

    $self->vcf($self->previous_output);
    
    $self->add_task(
        $self->load_vcf(
            vcf         => $self->vcf,
            annotations => $annotations,
            gid         => $gid
        )
    );
}

sub find_snps {
    my $self = shift;
    my $fasta = shift;
    my $bam = shift;

    my $output_file = 'snps.raw.bcf';

    # Pipe commands together
    my $sam_command = get_command_path('SAMTOOLS');
    $sam_command .= " mpileup -u -f " . basename($fasta) . ' ' . basename($bam);
    my $bcf_command = get_command_path('BCFTOOLS');
    $bcf_command .= " view -b -v -c -g";

    # Get the output filename
    my $output = basename($output_file);

    return {
        cmd => qq[$sam_command | $bcf_command - > $output],
        inputs => [
            $fasta,
            $fasta . '.fai',
            $bam
        ],
        outputs => [ $output_file ],
        description => "Identifying SNPs using SAMtools method"
    };
}

sub filter_snps {
    my $self = shift;
    my $bcf_file = shift;

    my $output_file = 'snps.vcf';

    my $params = $self->params->{snp_params};
    my $min_read_depth = $params->{'min-read-depth'} // 6;
    my $max_read_depth = $params->{'max-read-depth'} // 10;

    # Pipe commands together
    my $bcf_command = get_command_path('BCFTOOLS');
    $bcf_command .= " view " . basename($bcf_file);
    my $vcf_command = get_command_path('VCFTOOLS', 'vcfutils.pl');
    $vcf_command .= " varFilter -d $min_read_depth -D $max_read_depth";

    # Get the output filename
    my $output = basename($output_file);

    return {
        cmd => qq[$bcf_command | $vcf_command > $output],
        inputs  => [ $bcf_file ],
        outputs => [ $output_file ],
        description => "Filtering SNPs"
    };
}

sub generate_additional_metadata {
    my $self = shift;
    my $params = $self->params->{snp_params};
    
    my @annotations;
    push @annotations, qq{https://genomevolution.org/wiki/index.php?title=LoadExperiment||note|Generated by CoGe's NGS Analysis Pipeline};
    
    my $min_read_depth = $params->{'min-read-depth'} || 6;
    my $max_read_depth = $params->{'max-read-depth'} || 10;
    push @annotations, qq{note|SNPs generated using SAMtools method, min read depth $min_read_depth, max read depth $max_read_depth};
    
    return \@annotations;
}

1;
