var config = {

/*
 * Config file: for simplicity, Javascript Object Notation 
 * (JSON, http://www.json.org/) is used to specify parameters.
 * Because it is javascript, those parameters are then
 * directly interpretable by the browser. 
 *
 * single-line comments must be at beginning of line
 * (or someone must write the regular expressions to
 * deal with them).
 *
 * The format is:
 * 
 *       PARAMETER_NAME: "user_defined_value"
 *       nPARAMETER_NAME: number
 *
 *  parameters beginning with 'n' are numeric.
 *
 *  parameters are required, optional or
 *  dependent on other parameters as indicated
 *
 *
*/  

// BASE_UNITS_PER_PIXEL_X (Y) 
// Real-World Units per Pixel Unit
// NOTE: put this to the longest precision you can find. 
// <required>
nBASE_UNITS_PER_PIXEL_X: 0.0390625,

// BASE_UNITS_PER_PIXEL_X (Y) 
// Real-World Units per Pixel Unit
// NOTE: put this to the longest precision you can find. 
// <optional> defaults to nBASE_UNITS_PER_PIXEL_Y
nBASE_UNITS_PER_PIXEL_Y: 0.0390625,

// TILE_WIDTH
// width of the image to request from server
// best between 256-512.
// <required>
nTILE_WIDTH: 256,

// TILE_WIDTH
// width of the image to request from server
// if 2D best between 256-512. othewise set to the
// height generated by IMG_GENERATOR_URL 
// <required>
nTILE_HEIGHT: 345,

// IMG_GENERATOR_URL
// URL of the image script (contains / ends with "?")
// <required>
IMG_GENERATOR_URL: "http://toxic.berkeley.edu/CoGe/GenomePNG.pl?",

// IMG_TYPE
// type of image to render
// required
IMG_TYPE: "image/png",


// ONE_D
// if true, only has an X component
// with no y component
// <optional> if it"s 2D, dont use this param
ONE_DIM: true,


/*************** SPATIAL CGI ************************ 
 SPATIAL_PARS_NAME tells tiler.pl which parameters are 
 spatial parameters (because they need to be normalized)
 in order to cache tiles effectively
 
 NOTE the use of a javascript array [] containing 
 quoted ""  strings

 there are TWO cases for the URL:
 (.1.) each spatial parameter has it"s own CGI param 
         &xmin=123&xmax=456&ymin=234&ymax=345
   or maybe:
         &x0=123&x1=456&ymin=234&ymax=345 
 in which case use:
    SPATIAL_PARS_NAME:  ["xmin", "ymin", "xmax", "ymax"] 
    or
    SPATIAL_PARS_NAME ["x0","y0","x1","y1"]

 (.2.) the spatial parameters are in aggregate 
       as they are for (WMS or mapserver):
      &bbox=123,111,228,216  
           or 
      &extents=1+2+111+112
 in which case use:
    SPATIAL_PARS_NAME "bbox" 
           or
    SPATIAL_PARS_NAME "extents"
 NOTE: aggregates must always in the 
    order of xmin ymin xmax ymax
 
*/


//  SPATIAL_PARS_SEP is required if using an aggregate
//  (bbox or extents). it would be "+" for mapserver, and
//  "," for WMS.
//  it is not needed if using case (.1.) above.



// SPATIAL_PARS_NAME
// see above this must be an array:
// <required>
SPATIAL_PARS_NAME: ["x"],


// SPATIAL_PARS_SEP
// see above
// <dependent> on SPATIAL_PARS_NAME 
// SPATIAL_PARS_SEP "not_used in this ex." 


// ZOOM_PAR_NAME
// which parameter gives the zoom level
// <dependent> : not needed for BBOX or EXTENTS
ZOOM_PAR_NAME: "z",

// INITIAL_ZOOM
// starting zoom level (0 is the most zoomed in)
// (0 is also basis for the BASE_UNITS_PER_PIXEL)
// <required> 
nINITIAL_ZOOM:  3,

// MAX_ZOOM
// max zoom level: to prevent zooming way out
// <optional> default to infinity
nMAX_ZOOM: 20,

// NON_SPATIAL_PARS_NAME:
// the parameters that are requred to generate
// the image that are non-spatial
// <requred>
NON_SPATIAL_PARS_NAME: ["chr","di","iw"],

chr: 2,
di: 6,
iw: 256,

// INITIAL_CENTER
// the location (in UNITS above) on which 
// to center the viewer when page is loaded
// <required>
nINITIAL_CENTER: [155329, 0]

// need this closing bracket for the javascript object;
}; 
