<TMPL_IF NAME='MAIN'>
<script type="text/javascript" src="js/coge/utils.js"></script>
<SCRIPT type="text/javascript" src="./js/jquery.fileupload.js"></SCRIPT>
<SCRIPT type="text/javascript" src="./js/jstree/jquery.jstree.js"></SCRIPT>

<style type="text/css">

@font-face {
        font-family: 'Glyphicons Halflings';
        src: url('./js/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot');
	src: url('./js/vendor/bootstrap/fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'), url('./js/vendor/bootstrap/fonts/glyphicons-halflings-regular.woff') format('woff'), url('./js/vendor/bootstrap/fonts/glyphicons-halflings-regular.ttf') format('truetype'), url('./js/vendor/bootstrap/fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular') format('svg');}

.glyphicon {
        position: relative;
        top: 1px;
        display: inline-block;
        font-family: 'Glyphicons Halflings';
        font-style: normal;
        font-weight: normal;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
}

.glyphicon-asterisk:before {
        content: "\2a";
}

.jstree li a ins { display:none !important; }
.jstree.jstree-focused { background:white; }
</style>

<script>

$(function() {
	<TMPL_IF NAME='SHOW_RESULTS'>
		timing('org_search');
		$("._result").fadeIn();
	</TMPL_IF>

	//Auto-show results
	if ($('#org_search').val()) {
		timing('org_search');
	}

	$(".dialog").dialog({ autoOpen: false} );

	//Initialize AJAX
	$.ajaxSetup({
		type: "GET",
		url: "<TMPL_VAR NAME='PAGE NAME'>",
		dataType: "html",
		cache: false,
	});
});

var timestamps = new Array();

function search_organisms (search_term) {
	//console.log(search_term);
	if (search_term.length > 2) {
		timestamps['search_organisms'] = new Date().getTime();
		$.ajax({
			data: {
				fname: 'search_organisms',
				search_term: search_term,
				timestamp: timestamps['search_organisms']
			},
			success : function(data) {
				//console.log(data);
				var obj = jQuery.parseJSON(data);
				if (obj && obj.items && obj.timestamp == timestamps['search_organisms']) {
					var genomeCounter = 0;
					for(var i = 0; i < obj.items.length; i++) {
					   //console.log(obj.items[i].label);  This works!
					   genomeCounter++;
					}
					console.log("Genomes: " + genomeCounter);
					//$("#edit_organism").autocomplete({source: obj.items}).autocomplete("search");
				
				}
			},
		});
	}
}

function search_users (search_term) {
	timestamps['search_users'] = new Date().getTime();
	$.ajax({
		data: {
			fname: 'search_users',
			search_term: search_term,
			timestamp: timestamps['search_users']
		},
		success : function(data) {
			var obj = jQuery.parseJSON(data);
			if (obj && obj.items && obj.timestamp == timestamps['search_users']) {
				$("#edit_user").autocomplete({source: obj.items});
				$("#edit_user").autocomplete("search");
			}
		},
	});
}

function update_dialog(request, user, identifier, formatter) {
    var get_status = function () {
        $.ajax({
            type: 'GET',
            url: request,
            dataType: 'json',
            data: {
                username: user
            },
            success: update_callback,
            error: update_callback,
            xhrFields: {
                withCredentials: true
            }
        });
    };

    var update_callback = function(json) {
        var dialog = $(identifier);
        var workflow_status = $("<p></p>");
        var data = $("<ul></ul>");
        var results = [];
        var current_status;
        var timeout = 2000;

        var callback = function() {
            update_dialog(request, user, identifier, formatter);
        }

        if (json.error) {
            pageObj.error++;
            if (pageObj.error > 3) {
                workflow_status.html('<span class=\"alert\">The job engine has failed.</span>');
                load_failed();
                return;
            }
        } else {
            pageObj.error = 0;
        }

        if (json.status) {
            current_status = json.status.toLowerCase();
            workflow_status.html("Workflow status: ");
            workflow_status.append($('<span></span>').html(json.status));
            workflow_status.addClass('bold');
        } else {
            setTimeout(callback, timeout);
            return;
        }

        if (json.tasks) {
            var jobs = json.tasks;
            for (var index = 0; index < jobs.length; index++) {
                var item = formatter(jobs[index]);
                if (item) {
                    results.push(item);
                }
            }
        }

        if (!dialog.dialog('isOpen')) {
            return;
        }

        //FIXME Update when a workflow supports elapsed time
        if (current_status == "completed") {
            var total = json.tasks.reduce(function(a, b) {
                if (!b.elapsed) return a;

                return a + b.elapsed;
            }, 0);

            var duration = coge.utils.toPrettyDuration(total);

            workflow_status.append("<br>Finished in " + duration);
            workflow_status.find('span').addClass('completed');
            get_load_log(function(result) {
                load_succeeded(result);
            });

        }
        else if (current_status == "failed"
                || current_status == "error"
                || current_status == "terminated"
                || current_status == "cancelled")
        {
            workflow_status.find('span').addClass('alert');
            get_load_log(function(result) {
                load_failed(result);
            });
        }
        else if (current_status == "notfound") {
            setTimeout(callback, timeout);
            return;
        }
        else {
            workflow_status.find('span').addClass('running');
            setTimeout(callback, timeout);
        }

        results.push(workflow_status);
        data.append(results);
        dialog.find('#load_log').html(data);
    };

    get_status();
}

function wait_to_search (search_func, search_term) {
	//console.log(search_term);
	pageObj.search_term = search_term;

	if (pageObj.time) {
		clearTimeout(pageObj.time);
	}

	// FIXME: could generalize by passing select id instead of separate search_* functions
	pageObj.time = setTimeout(
		function() {
			search_func(pageObj.search_term);
		},
		500
	);
}

//$(document).ready(function(){
//	$.ajaxSetup({
//		type: "POST",
//		url: "<TMPL_VAR NAME=PAGE_NAME>",
//		dataType: "html",
//		cache: false,
//	});
//        $('#group_table').tablesorter({
//		cssAsc: 'headerSortUp',		// Class name for ascending sorting action to header
//		cssDesc: 'headerSortDown',	// Class name for descending sorting action to header
//		cssHeader: 'header',			// Class name for headers (th's)
//		widgets: ['zebra'],
//		headers: {0: {sorter: false},},	//don't allow sort on the first column
//		});
//});


/*
function run_ajax(opts){
      if (!opts){opts={};}
      divid = opts.divid; //where results will be displayed in page
      stuff = opts.stuff; //example of passing in some stuff

      // create a new closure who's scope does *not*
      // include the `divid` value so that callback will
      // not clobber the `divid` variable
      var create_callback = function(divid) {
              var local_divid = divid;
              return function (data) {
                  $('#'+local_divid).html(data);
              };
          };

      $.ajax({
        data: {
     	   jquery_ajax: 1,
	   fname: 'test_ajax',
   	   stuff: stuff
           },
        success : create_callback(divid)
      });
}*/

</SCRIPT>
<div class="coge-bg inline padded ui-widget-content ui-corner-all">

	    <td>Search:</td>
	    <td>
	      <tmpl_if name=SEARCH>
	        <input id="edit_organism" type="search" placeholder="Search" onkeyup="wait_to_search(search_organisms, this.value);" value="<tmpl_var name=ORGANISM_NAME>"size="50" spellcheck="false" />
	      <tmpl_else>
	        <input id="edit_organism" type="search" placeholder="Search" onkeyup="wait_to_search(search_organisms, this.value);" size="50" spellcheck="false" />
	      </tmpl_if>
	    </td>
</div>

<table cellspacing="15" class="hidden _result" style="border-top:1px solid lightgray;">
	<tr class="hidden _result">
	   <td>
		<span class="coge-table-header">Organisms: </span>
		<span class='small' id='org_count'><TMPL_VAR NAME="ORG_COUNT"></span>
		<div id="org_list"><TMPL_VAR NAME="ORG_LIST"></div>
	   </td>
	   <td valign='top'>
		<div class="coge-table-header">Organism Information</div>
		<div id='org_info' class="ui-corner-all ui-widget-content"></div>
	   </td>
	</tr>
</table>

<!--The following is commented out for possible later use.-->
<!--This is a blank page.  Use it to create a new page for CoGe!
<div id=stuff>LALA</div>
<DIV class = link id=output onclick="run_ajax({stuff: $('#stuff').html(), divid: 'stuff'});">Click here!</DIV>

Here is a sortable table (the first column is not able to be sorted upon):<br>
<TABLE id=group_table class="small ui-widget-content ui-corner-all">
 <THEAD align=left>
  <TR>
   <TH>Name</TH>
   <TH>Description</TH>
   <TH>Members</TH>
   <TH>Role</TH>
   <TH>Permissions</TH>
   <TH>Genomes</TH>
  </TR>
 </THEAD>
 <tbody align=left valign="top" id="group_table_body" class=small>
  <TR>
   <TD>1</TD>
   <TD>2</TD>
   <TD>1</TD>
   <TD>2</TD>
   <TD>1</TD>
   <TD>2</TD>
  </TR>
  <TR>
   <TD>2</TD>
   <TD>1</TD>
   <TD>2</TD>
   <TD>1</TD>
   <TD>2</TD>
   <TD>1</TD>
  </TR>
  <TR>
   <TD>3</TD>
   <TD>3</TD>
   <TD>3</TD>
   <TD>4</TD>
   <TD>4</TD>
   <TD>4</TD>
  </TR>
 </tbody>
</TABLE>-->

</TMPL_IF>
