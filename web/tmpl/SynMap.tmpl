<script language="javascript">
function get_organism_chain(type,val,i)
{
 $('#org_list').html('<input type=hidden id = "org_id"+i><font class="loading"></font>');
 if (type == 'name') {get_orgs(['args__name','args__'+val,'args__i','args__'+i], ['org_list'+i]);}
 else if (type == 'desc') {get_orgs(['args__desc','args__'+val,'args__i','args__'+i], ['org_list'+i]);}
 $('#ds_info'+i).html('<div class="loading dna_small small">loading. . .</div>');
 check_previous_analyses();
 ajax_wait("get_datasets(['args__oid','org_id"+i+"','args__masked','masked"+i+"', 'args__seq_type','seq_type"+i+"'],['ds_info"+i+"']);");
// ajax_wait("check_previous_analyses();");
}

function run_synmap(){
if(!pageObj.basename) 
  {
  	setTimeout("run_synmap()", 100);
  	return;
  }
	$('#results').hide(0);  	
  	$('#log_text').show(0);

  pageObj.nolog=1;
  setTimeout("monitor_log()", 5000);
  
go(['args__oid1','org_id1','args__oid2','org_id2','args__D','D','args__g','g','args__A','A','args__blast','blast', 'args__seq_type1','seq_type1', 'args__seq_type2','seq_type2','args__masked1','masked1', 'args__masked2','masked2','args__jobtitle','jobtitle','args__basename','args__'+pageObj.basename,'args__email','email','args__regen_images','args__'+$('#regen_images')[0].checked],[handle_results]);
}

function handle_results(val){
 $('#log_text').hide(0);
 $('#results').show(0).html(val);
 $('#synmap_go').show();
}

function check_previous_analyses(){
 get_previous_analyses(['args__oid1','org_id1','args__oid2','org_id2','args__seq_type1','seq_type1','args__seq_type2','seq_type2','args__masked1','masked1', 'args__masked2','masked2'],['previous_analyses']);
}

function update_params() {
 var params = $('#prev_params').val()[0].split('_');;
 $('#g').val(params[0]);
 $('#D').val(params[1]);
 $('#A').val(params[2]);
 if ($('#org_id1').val() == params[3])
  {
    $('#seq_type1 option:eq('+params[5]+')').attr('selected','selected');
    $('#seq_type2 option:eq('+params[8]+')').attr('selected','selected');
    $('#masked1 option:eq('+params[4]+')').attr('selected','selected');
    $('#masked2 option:eq('+params[7]+')').attr('selected','selected');
  }
 else
  {
    $('#seq_type2 option:eq('+params[5]+')').attr('selected','selected');
    $('#seq_type1 option:eq('+params[8]+')').attr('selected','selected');
    $('#masked2 option:eq('+params[4]+')').attr('selected','selected');
    $('#masked1 option:eq('+params[7]+')').attr('selected','selected');
  }
 $('#blast option:eq('+params[9]+')').attr('selected','selected');
}

function set_dagchainer_defaults() {
  var settings = $('#dagchainer_default').val();
  var params;
  if (settings == 1)
   { params = [24000, 120000, 3];}
  else if (settings == 2)
   { params = [1000, 2000, 3];}
  console.log(params);
  if (!params) {return;}
  $('#g').val(params[0]);
  $('#D').val(params[1]);
  $('#A').val(params[2]);
 }

function ajax_wait (val){
if (ajax.length)
   {
    setTimeout("ajax_wait("+'"'+val+'"'+")",100);
    return;
   }
  eval(val);
}

function timing(val, val2){
  namere = /name/;
  descre = /desc/;
  if (namere.exec(val)) 
   {
    searchterm = $('#'+val).val();
   }
  else if (descre.exec(val)) 
   {
    searchterm = $('#'+val).val();
   }
  var searchterm;
  if (!searchterm) {val=0;}
  if(searchterm == "Search")
  {
    searchterm = "";
  }
  pageobjsearch = "search"+val;
  pageobjtime = "time"+val;
  if (pageObj.pageobjsearch && pageObj.pageobjsearch == searchterm+val)
   {
    return;
   }
  pageObj.pageobjsearch=searchterm+val;
  if (pageObj.pageobjtime){
   clearTimeout(pageObj.pageobjtime);
  }
  re = /(\d+)/;
  i = re.exec(val);

  if (namere.exec(val)) 
   {
     if (val2)
     {
      get_organism_chain('name',$('#'+val).val(),i[0])
     }
     else
     {
       pageObj.pageobjtime = setTimeout("get_organism_chain('name',$('#"+val+"').val(),i[0])",500);
     }

   }
  else if (descre.exec(val)) 
   {
     if (val2)
     {
      get_organism_chain('desc',$('#'+val).val(),i[0])
     }
     else
     {
       pageObj.pageobjtime = setTimeout("get_organism_chain('desc',$('#"+val+"').val(),i[0])",200);
     }
   }  
}

$(document).ready(function(){
  if($('#org_name1').val() != "Search") {
    $('#org_name1').css({fontStyle: "normal"});
    timing('org_name1',1);
  }  
  if($('#org_desc1').val() != "Search") {
    $('#org_desc1').css({fontStyle: "normal"});
    timing('org_desc1',1);
  }  
  if($('#org_name2').val() != "Search") {
    $('#org_name2').css({fontStyle: "normal"});
    timing('org_name2',1);
  }  
  if($('#org_desc2').val() != "Search") {
    $('#org_desc2').css({fontStyle: "normal"});
    timing('org_desc2',1);
  }  
 });

function search_bar(div_id){
  if($('#'+div_id).val() == "Search") $('#'+div_id).val("").css({fontStyle: "normal"});
}

function restore_search_bar(div_id){
  if(! $('#'+div_id).val()) {
    $('#'+div_id).val("Search").css({fontStyle: "italic"});
  }
}

//These two functions are involved with emailing results
function toggle_email_field(){
	if ($('#check_email')[0].checked)
	{
		$('.email_box').show(0);
	}
	else{
		$('.email_box').hide(0);
		$('#email').val('');
		$('#email_error').hide(0);
	}
}

function address_validity_check(validity){
	if (validity)
	{
		if(validity == 'invalid'){
		$('#email_error').show(0);
		}
		else{
		$('#email_error').hide(0);
		}
	}
	else{
	check_address_validity(['email'],[address_validity_check]);
	}
}

function fill_jobtitle(){
	var org1 = $('#org_id1 option:selected').html() || 0;
	var org2 = $('#org_id2 option:selected').html() || 0;
	
	if (org1 != 0) {org1 = org1.replace(/\s+\(id\d+\)$/,"");}
	if (org2 != 0) {org2 = org2.replace(/\s+\(id\d+\)$/,"");}
	
	var title;
	
	if (org1 != 0 && org2 != 0) title = org1+" v. "+org2;
	else if (org1 != 0) title = org1;
	else if (org2 != 0) title = org2;
	else return;
	
	$('#jobtitle').val(title);
}

function update_basename(basename){
	pageObj.basename=basename;
	//alert(pageObj.basename);
}

function reset_basename(){
	if(pageObj.basename) pageObj.basename=0;
}
 function monitor_log(log)
{

  var fasta = 0;
  var blast = 0;
  var blastdb = 0;
  var dag = 0;
  var results = 0;
  var match;
  pageObj.finished = 0;
  if (log) {
  
  if(log.match(/fasta file/i)) fasta="Generating fasta files . . . ";
  if(log.match(/Completed fasta creation/i)) {
  	fasta += "done!<br/>";
  	blastdb = "Generating blastable databases . . . ";
  }
  if(log.match(/Completed blastdb creation/i)) {
  	blastdb += "done!<br/>";
  	blast = "Running blast . . . ";
  }
   if(log.match(/Completed blast run/i)) {
  	blast += "done!<br/>";
  	dag = "Running DAGChainer . . . ";
  }
  if(log.match(/Completed dagchainer run/i)) {
  	dag += "done!<br/>";
  	results = "Generating images . . . ";
  	pageObj.finished = 1;
  }
 }
  

  else {pageObj.nolog += 1;}
  var message = "Initializing search . . . ";
  
  if (fasta) message += "done!<br/>"+fasta;
  if (blastdb) message += blastdb;
  if (blast) message += blast;
  if (dag) message += dag;
  if (results) message += results;
  
  if (!pageObj.finished && pageObj.nolog<8) {setTimeout("read_log(['args__logfile', 'args__'+pageObj.basename, 'args__prog','args__SynMap'], [monitor_log])",5000);}
  
  if (message) $('#log_text').html(message);
}

function synteny_zoom(oid1, oid2, basename, chr1, chr2)
{
 var url = '/CoGe/run_plot_dag.pl?org1='+oid1+';org2='+oid2+';chr1='+chr1+';chr2='+chr2+';base='+basename;
 var loc = $('#map_loc').val();
 if (/window/.test(loc))
  {
    get_plot_dag(['args__src','args__'+url, 'args__loc','args__'+loc, 'args__flip','args__'+$('#flip')[0].checked,'args__regen_images','args__'+$('#regen_images')[0].checked],[open_window]);
  }
 else
  {
    get_plot_dag(['args__src','args__'+url, 'args__flip','args__'+$('#flip')[0].checked,'args__regen_images','args__'+$('#regen_images')[0].checked],['syn_loc'+loc]);
  }
}

function open_window (url, loc, width, height)
 {
    my_window = window.open(url,loc,'"width='+width+',height='+height+', scrollbars=1"');
//    console.log(width+"::"+height);
//    height = parseInt(height)+parseInt(50);
//    console.log(height);
    my_window.resizeTo(width,height);
 }

</script>
<table><tr><td>
<DIV id=log_text class="small dna" style="display:none"></DIV>
<DIV id=results><TMPL_IF NAME=RESULTS><TMPL_VAR NAME=RESULTS><TMPL_ELSE><span class="alert">WARNING:</span>  SynMap is a very computationally intense, multi-step program which may take hours to complete. It is highly recommended to have your results emailed to you. Please do not repeatedly pressed the "Generate SynMap" button!  When run, SynMap will:
<li class=small>Generate fasta files of all coding sequence in selected genomes
<li class=small>Generate blastable databases of sequences
<li class=small>Blast genomes (self-self and self-other)
<li class=small>Find tandem duplicates in each genome (hence the self-self blast)
<li class=small>Use DAGchainer to find syntenic regions (parameters below)
<li class=small>Generate dotplot images and image maps with GEvo links
<li class=small>If requested, will e-mail your results to you<br>
<span class=species>SynMap will run faster if it has been previously run as it won't regenerate any previously made data-sets.</span>
</TMPL_IF>
</div>
</table>

<div>
<input type=button id="synmap_go" value="Generate SynMap" onClick="$('#synmap_go').hide();reset_basename();generate_basefile([],[update_basename]);run_synmap();" \>

<input type=button value="Clear Results" onClick="$('#results').html('');" \>

<TABLE>
<tr><th><DIV class="topItemSelected ">Select Organisms:</DIV>
<table class="dropMenu" width=100%>
 <TR align=left>
  <TD valign=top>
   <DIV class = "oblique">Organism 1: </DIV>
   <DIV style="">Search <span class=small>Name: <input type="text" size=10 value="<TMPL_VAR NAME="ORG_NAME1">" name = "org_name1" id="org_name1" style="font-style:italic" onFocus="search_bar('org_name1')" onKeyUp='timing("org_name1");'><span>
   Description: <input type="text" size=10 value="<TMPL_VAR NAME="ORG_DESC1">" name = "org_desc1" id="org_desc1" style="font-style:italic" onFocus="search_bar('org_desc1')" onKeyUp='timing("org_desc1");'></DIV>
   Try to use sequence of type:
   <select id=masked1 onChange="get_datasets(['args__oid','org_id1', 'args__masked','masked1', 'args__seq_type','seq_type1', 'args__seq_type','seq_type1'],['ds_info1'])">
     <option value="1">unmasked</option>
     <option value="2" selected>masked</option>
   </select>
   <select id="seq_type1" name ="seq_type1">
       <OPTION VALUE="1" selected>CDS
       <OPTION VALUE="2">genomic
   </select>
   <DIV id="org_list1"><TMPL_VAR NAME="ORG_LIST1"></DIV>
   <DIV style="float: left; vertical-align: top;" id="ds_info1"><TMPL_VAR NAME="DS_INFO1"></DIV>

  <TD valign=top>
   <DIV class = "oblique">Organism 2: </DIV>
   <DIV style="">Search <span class=small>Name: <input type="text" size=10 value="<TMPL_VAR NAME="ORG_NAME2">" name = "org_name2" id="org_name2" style="font-style:italic" onFocus="search_bar('org_name2')" onKeyUp='timing("org_name2");'></span>
   Description: <input type="text" size=10 value="<TMPL_VAR NAME="ORG_DESC2">" name = "org_desc2" id="org_desc2" style="font-style:italic" onFocus="search_bar('org_desc2')" onKeyUp='timing("org_desc2");'></DIV>
   Try to use sequence of type:
   <select id=masked2 onChange="get_datasets(['args__oid','org_id2', 'args__masked','masked2', 'args__seq_type','seq_type2', 'args__seq_type','seq_type2'],['ds_info2'])">
     <option value="1">unmasked</option>
     <option value="2" selected>masked</option>
   </select>
   <select id="seq_type2" name ="seq_type2">
       <OPTION VALUE="1" selected>CDS
       <OPTION VALUE="2">genomic
   </select>
   <DIV id="org_list2"><TMPL_VAR NAME="ORG_LIST2"></DIV>
   <DIV style="float: left; vertical-align: top;" id="ds_info2"><TMPL_VAR NAME="DS_INFO2"></DIV>
</TABLE>

<tr><th>
<DIV class="topItemSelected "><a href =http://dagchainer.sourceforge.net/ target=_new>DAGChainer</a> Options:</DIV>
<table>
<tr><td>
<table class="dropMenu">
 <TR>
   <TD>Default settings for:
   <TD>
      <select id="dagchainer_default" onChange="set_dagchainer_defaults();">
       <option value="1">Plant
       <option value="2">Microbe
      </select>
 <TR>
   <TD>Average distance expected between syntenic genes (-g):
   <TD><input type=text size=8 id="g" value="24000"> bp
 <TR>
   <TD>Maximum distance between two matches (-D): 
   <TD><input type=text size=8 id="D" value="120000"> bp
 <TR>
   <TD>Minimum number of aligned pairs (-A): 
   <TD><input type=text size=8 id="A" value="3"> bp
</TABLE>
<td valign=top><div id=previous_analyses></div>
</TABLE>

<tr><th>
<DIV class="topItemSelected ">SynMap Options:</DIV>
<table class="dropMenu">
<tr><td>
<table>
 <TR>
   <TD>Blast Algorithm:
   <select id="blast" name="blast">
        <OPTION VALUE="1" selected>BlastN
        <OPTION VALUE="2">TBlastX
       </select>
   </td>
  <TR>
   <td>E-mail results? <input type=checkbox id=check_email onclick="toggle_email_field()"></td>
		<td><div class=email_box style="display:none;">Your E-mail Address: <input type=text id=email onBlur='address_validity_check()'>
		<br>
		<font id=email_error class="small" style="display: none; color: red;">You have supplied an invalid e-mail address.</font></div></td>
		<td><div class=email_box style="display:none;">Job Title:</div></td>
		<td><div class=email_box style="display:none;"><input type=text id=jobtitle> <input type=button value="Use Org Names" onClick="fill_jobtitle()"></div></td>

 <TR>
   <TD>Regenerate dotplot images?
   <input type=checkbox name="regen_images" id="regen_images">
</TABLE>
</TABLE>
</TABLE>
</div>
