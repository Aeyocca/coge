<TMPL_IF NAME=MAIN>
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.tablesorter.2.0.3.js"></SCRIPT>

<script language="javascript">

function init_table() {
 $("#prev_table").tablesorter({		
		sortClassAsc: 'headerSortUp',		// Class name for ascending sorting action to header
		sortClassDesc: 'headerSortDown',	// Class name for descending sorting action to header
		headerClass: 'header',			// Class name for headers (th's)
		widgets: ['zebra'],
		textExtraction: 'complex',
		});
};

$(function() {$("#pair_info").draggable();});
$(function() {$("#tabs").tabs({selected:0});});	     
$(function() {$(".resizable").resizable();});


function get_organism_chain(type,val,i)
{
 $('#org_list').html('<input type=hidden id = "org_id"+i><font class="loading"></font>');
 if (type == 'name') {get_orgs(['args__name','args__'+val,'args__i','args__'+i], ['org_list'+i]);}
 else if (type == 'desc') {get_orgs(['args__desc','args__'+val,'args__i','args__'+i], ['org_list'+i]);}
 $('#dsg_info'+i).html('<div class="loading dna_small small">loading. . .</div>');
 ajax_wait("gen_dsg_menu(['args__oid','org_id"+i+"', 'args__num','args__"+i+"'],['dsg_menu"+i+"', 'genome_message"+i+"']);");
 ajax_wait("check_previous_analyses();");   
 ajax_wait("get_dataset_group_info(['args__dsgid','dsgid"+i+"','args__org_num','args__"+i+"'],['dsg_info"+i+"','feattype_menu"+i+"','genome_message"+i+"']);");
}

function get_dataset_group_info_chain(i)
{
 $('#dsg_info'+i).html('<div class=dna_small class=loading class=small>loading. . .</div>'); 
 // ajax_wait("gen_dsg_menu(['args__oid','org_id"+i+"', 'args__num','args__"+i+"'],['dsg_menu"+i+"','genome_message"+i+"']);");
 gen_dsg_menu(['args__oid','org_id'+i, 'args__num','args__'+i],['dsg_menu'+i,'genome_message'+i]);
 ajax_wait("check_previous_analyses();");   
 ajax_wait("get_dataset_group_info(['args__dsgid','dsgid"+i+"','args__org_num','args__"+i+"'],['dsg_info"+i+"','feattype_menu"+i+"','genome_message"+i+"']);");
}

	

function run_synmap(){
if(!pageObj.basename) 
  {
  	setTimeout("run_synmap()", 100);
  	return;
  }
	$('#results').hide(0);  	
  	$('#log_text').show(0);

  pageObj.nolog=1;
  setTimeout("monitor_log()", 5000);
  
go(['args__D','D','args__g','g','args__A','A','args__blast','blast', 'args__feat_type1','feat_type1', 'args__feat_type2','feat_type2','args__dsgid1','dsgid1', 'args__dsgid2','dsgid2','args__jobtitle','jobtitle','args__basename','args__'+pageObj.basename,'args__email','email','args__regen_images','args__'+$('#regen_images')[0].checked, 'args__width', 'args__'+$('#master_width').val(), 'args__dagchainer_type','args__'+$('#dagchainer_type')[0].checked, 'args__ks_type','ks_type', 'args__assemble','assemble'],[handle_results]);
ajax_wait("check_previous_analyses();");
}

function handle_results(val){
 $('#log_text').hide(0);
 $('#results').show(0).html(val);
 $('#synmap_go').show();
$(function() {$("#synmap_zoom_box").draggable();});
}

function check_previous_analyses(){
 get_previous_analyses(['args__oid1','org_id1', 'args__oid2','org_id2'],[load_previous_analyses]);
}

function load_previous_analyses (stuff) {
 $('#previous_analyses').html(stuff);
 init_table();
}

function update_params(val) {
 var params;
 if (val)
   {
     var params = val.split('_');
   }
 else
   {
     params = $('#prev_params').val()[0].split('_');;
   }
 if ($('#org_id1').val() == params[3])
  {
    $('#feat_type1').attr('value', params[5]);
    $('#feat_type2').attr('value', params[8]);
    $('#dsgid1').attr('value',params[4]);
    $('#dsgid2').attr('value',params[7]);
  }
 else
  {
    $('#feat_type2').attr('value', params[5]);
    $('#feat_type1').attr('value', params[8]);
    $('#dsgid2').attr('value',params[4]);
    $('#dsgid1').attr('value',params[7]);
  }
 var type;
 $('#blast option:eq('+params[0]+')').attr('selected','selected');
 if (params[10] == 'Distance') 
  {
   $("input[name='dagchainer_type']:nth(1)").attr("checked","checked");
   type=" bp";
  }
 else 
  {
   $("input[name='dagchainer_type']:nth(0)").attr("checked","checked");
   type= " genes"
  }
 display_dagchainer_settings([params[0],params[1],params[2]],type);
}

function set_dagchainer_defaults(params, type) {
  var settings = $('#dagchainer_default').val();
  if (!(params && type))
   {
    if ($('#dagchainer_type')[0].checked)
     {
       params = [10,20,5];
       type = " genes";  
     } 
    else
     { 
      if (settings == 1) // for plant genomes
       { params = [24000, 120000, 3];}
      else if (settings == 2) // for microbe genomes
       { params = [1000, 2000, 3];}
       type=" bp";
     }
  }
  if (!params) {return;}
  $('#g').val(params[0]);
  $('#D').val(params[1]);
  $('#A').val(params[2]);
  $('.distance_type').html(type);
 }

function ajax_wait (val){
if (ajax.length)
   {
    setTimeout("ajax_wait("+'"'+val+'"'+")",100);
    return;
   }
  eval(val);
}

function timing(val, val2){
  namere = /name/;
  descre = /desc/;
  if (namere.exec(val)) 
   {
    searchterm = $('#'+val).val();
   }
  else if (descre.exec(val)) 
   {
    searchterm = $('#'+val).val();
   }
  var searchterm;
  if (!searchterm) {val=0;}
  if(searchterm == "Search")
  {
    searchterm = "";
  }
  pageobjsearch = "search"+val;
  pageobjtime = "time"+val;
  if (pageObj.pageobjsearch && pageObj.pageobjsearch == searchterm+val)
   {
    return;
   }
  pageObj.pageobjsearch=searchterm+val;
  if (pageObj.pageobjtime){
   clearTimeout(pageObj.pageobjtime);
  }
  re = /(\d+)/;
  i = re.exec(val);

  if (namere.exec(val)) 
   {
     if (val2)
     {
      get_organism_chain('name',$('#'+val).val(),i[0])
     }
     else
     {
       pageObj.pageobjtime = setTimeout("get_organism_chain('name',$('#"+val+"').val(),i[0])",500);
     }

   }
  else if (descre.exec(val)) 
   {
     if (val2)
     {
      get_organism_chain('desc',$('#'+val).val(),i[0])
     }
     else
     {
       pageObj.pageobjtime = setTimeout("get_organism_chain('desc',$('#"+val+"').val(),i[0])",200);
     }
   }  
}

$(document).ready(function(){
  if($('#org_name1').val() != "Search") {
    $('#org_name1').css({fontStyle: "normal"});
    timing('org_name1',1);
  }  
  if($('#org_desc1').val() != "Search") {
    $('#org_desc1').css({fontStyle: "normal"});
    timing('org_desc1',1);
  }  
  if($('#org_name2').val() != "Search") {
    $('#org_name2').css({fontStyle: "normal"});
    timing('org_name2',1);
  }  
  if($('#org_desc2').val() != "Search") {
    $('#org_desc2').css({fontStyle: "normal"});
    timing('org_desc2',1);
  }
  ajax_wait("check_previous_analyses();"); 
    <TMPL_VAR NAME=DISPLAY_DAGCHAINER_SETTINGS>
 var autogo = <TMPL_VAR NAME=AUTOGO>;
 if (autogo) {
    generate_basefile([],[update_basename]);
    run_synmap();
    }
 });


function display_dagchainer_settings(params,type) {
 
 if ($('#dagchainer_type')[0].checked)
  {
   $('#dagchainer_distance').hide(0);
  }
 else
  {
   $('#dagchainer_distance').show(0);
  }
  set_dagchainer_defaults(params, type);
}

function search_bar(div_id){
  if($('#'+div_id).val() == "Search") $('#'+div_id).val("").css({fontStyle: "normal"});
}

function restore_search_bar(div_id){
  if(! $('#'+div_id).val()) {
    $('#'+div_id).val("Search").css({fontStyle: "italic"});
  }
}

//These two functions are involved with emailing results
function toggle_email_field(){
	if ($('#check_email')[0].checked)
	{
		$('.email_box').show(0);
	}
	else{
		$('.email_box').hide(0);
		$('#email').val('');
		$('#email_error').hide(0);
	}
}

function address_validity_check(validity){
	if (validity)
	{
		if(validity == 'invalid'){
		$('#email_error').show(0);
		}
		else{
		$('#email_error').hide(0);
		}
	}
	else{
	check_address_validity(['email'],[address_validity_check]);
	}
}

function fill_jobtitle(){
	var org1 = $('#org_id1 option:selected').html() || 0;
	var org2 = $('#org_id2 option:selected').html() || 0;
	
	if (org1 != 0) {org1 = org1.replace(/\s+\(id\d+\)$/,"");}
	if (org2 != 0) {org2 = org2.replace(/\s+\(id\d+\)$/,"");}
	
	var title;
	
	if (org1 != 0 && org2 != 0) title = org1+" v. "+org2;
	else if (org1 != 0) title = org1;
	else if (org2 != 0) title = org2;
	else return;
	
	$('#jobtitle').val(title);
}

function update_basename(basename){
	pageObj.basename=basename;
}

function reset_basename(){
	if(pageObj.basename) pageObj.basename=0;
}
 function monitor_log(log)
{

  var fasta = 0;
  var blast = 0;
  var blastdb = 0;
  var dag = 0;
  var converting=0;
  var results = 0;
  var match;
  pageObj.finished = 0;
  if (log) {
  
  if(log.match(/fasta file/i)) fasta="Generating fasta files . . . ";
  if(log.match(/Completed fasta creation/i)) {
  	fasta += "done!<br/>";
  	blastdb = "Generating blastable databases . . . ";
  }
  if(log.match(/Completed blastdb creation/i)) {
  	blastdb += "done!<br/>";
  	blast = "Running blast . . . ";
  }
   if(log.match(/Completed blast run/i)) {
  	blast += "done!<br/>";
  	dag = "Running DAGChainer . . . ";
  }
  if(log.match(/Completed dagchainer run/i)) {
  	dag += "done!<br/>";
  	results = "Generating images . . . ";
  	pageObj.finished = 1;
  }
 }
  

  else {pageObj.nolog += 1;}
  var message = "Initializing search . . . ";
  
  if (fasta) message += "done!<br/>"+fasta;
  if (blastdb) message += blastdb;
  if (blast) message += blast;
  if (dag) message += dag;
  if (results) message += results;
  
  if (!pageObj.finished && pageObj.nolog<8) {setTimeout("read_log(['args__logfile', 'args__'+pageObj.basename, 'args__prog','args__SynMap'], [monitor_log])",5000);}
  
  if (message) $('#log_text').html(message);
}

function synteny_zoom(dsgid1, dsgid2, basename, chr1, chr2, ksdb)
{
 var url = '/CoGe/run_dotplot.pl?dsg1='+dsgid1+';dsg2='+dsgid2+';chr1='+chr1+';chr2='+chr2+';base='+basename;
 var loc = $('#map_loc').val();
 var width = $('#zoom_width').val();
 var min = $('#zoom_min').val();
 var max = $('#zoom_max').val();
 if (/window/.test(loc))
  {
    var loc = pageObj.loc;
    if (!loc) {loc=1;}
    loc++;
    pageObj.loc=loc;
    win = window.open ('DisplayMessage.pl', 'win'+loc,'width=400,height=200,scrollbars=1');
    win.focus();
    get_dotplot(['args__src','args__'+url, 'args__loc','args__'+loc, 'args__flip','args__'+$('#flip')[0].checked,'args__regen_images','args__'+$('#regen_images')[0].checked, 'args__width', 'args__'+width, 'args__ksdb','args__'+ksdb,'args__kstype','ks_type','args__min', 'args__'+min,'args__max', 'args__'+max],[open_window]);
  }
 else
  {
  $('#syn_loc'+loc).html('<span class=loading>loading . . .</span>');
    get_dotplot(['args__src','args__'+url,'args__flip','args__'+$('#flip')[0].checked,'args__regen_images','args__'+$('#regen_images')[0].checked, 'args__width', 'args__'+width, 'args__ksdb','args__'+ksdb,'args__kstype','ks_type','args__min', 'args__'+min,'args__max', 'args__'+max],['syn_loc'+loc]);
  }
}

function open_window (url, loc, width, height)
 {
    if (!loc) {loc = pageObj.loc;}
    if (!loc) {loc=1;}
    my_window = window.open(url,"win"+loc,'"width='+width+',height='+height+', scrollbars=1"');
    my_window.resizeTo(width,height);
 }

</script>
<table><tr><td>
<DIV id=log_text class="small dna" style="display:none"></DIV>
<DIV id=results><TMPL_IF NAME=RESULTS><TMPL_VAR NAME=RESULTS><TMPL_ELSE>
<p><span class="alert">WARNING:</span> SynMap is still in beta and may not return results.  Please contact <a href="mailto:elyons@nature.berkeley.edu">Eric Lyons</a> if you feel your analysis has a problem and would like some help.  If available, please send him a copy of the log file<br>
<span class="alert">Please Note:</span>  SynMap is a very computationally intense, multi-step program which may take hours to complete for large genomes.<br>
<span class=species>SynMap will run faster if it has been previously run as it won't regenerate any previously made data-sets.</span></p>
<a href="SynMap.pl?dsgid1=3068;dsgid2=8;D=20;g=10;A=5;w=0;b=1;ft1=1;ft2=1;dt=geneorder;ks=1;autogo=1">Click here for an example analysis between <i>Arabidopsis thaliana</i> and <i>Arabidopsis lyrata</i>.</a><br><span class=small>(Note that syntenic gene pairs are colored by synonymous mutations (kS))</span>


</TMPL_IF>
</div>
</table>


<span style="font-size: 1em" class="ui-button ui-state-default ui-corner-all" id="synmap_go" onClick="$('#synmap_go').hide();reset_basename();generate_basefile([],[update_basename]);run_synmap();" >Generate SynMap</span>

<span style="font-size: 1em" class='ui-button ui-state-default ui-corner-all' onClick="$('#results').html('');" >Clear Results</span>

<div id=tabs style='margin-top: 0.5em'>

<ul>
 <li class=small><a href="#tab-1">Select Organisms</a></li>
 <li class=small><a href="#tab-2">DAGChainer Options</a></li>
 <li class=small><a href="#tab-3">SynMap Options</a></li>
</ul>


<div id="tab-1">
 <table><tr valign=top>
  <TMPL_VAR NAME=ORG_MENU1>
  <TMPL_VAR NAME=ORG_MENU2>
 </table>
<div id=previous_analyses></div>

</div> <!--close tab-1 -->

<div id="tab-2">
    <label>Relative Gene Order<input id="dagchainer_type" name="dagchainer_type" type=radio value="gene_order" <TMPL_VAR DAG_GENE_SELECT>  onCLick="display_dagchainer_settings()"></label>
    <label>Nucleotide Distance<input id="dagchainer_type" name="dagchainer_type" type=radio value="distance" <TMPL_VAR DAG_DISTANCE_SELECT>  onCLick="display_dagchainer_settings()"></label>
<DIV onclick="open.window('http://dagchainer.sourceforge.net/')" class="link">Download DAGChainer</DIV>


<DIV id=dagchainer_distance>
   <span class='species'>Default distance settings for: </span>
      <select id="dagchainer_default" onChange="set_dagchainer_defaults();">
       <option value="1">Plant
       <option value="2">Microbe
      </select>
</div>

 <table>
 <TR>
   <TD>
   <TD>
 <TR>
   <TD>Average distance expected between syntenic genes (-g):
   <TD><input type=text size=8 id="g" value=""><span class=distance_type></span>
 <TR>
   <TD>Maximum distance between two matches (-D): 
   <TD><input type=text size=8 id="D" value=""><span class=distance_type></span>
 <TR>
   <TD>Minimum number of aligned pairs (-A): 
   <TD><input type=text size=8 id="A" value=""> genes

</TABLE>
</div> <!-- close tab-2 -->

<div id="tab-3">
<table>
 <TR>
   <TD>Blast Algorithm:
   <select id="blast" name="blast">
        <OPTION VALUE="1" <TMPL_VAR NAME="BLASTN_SELECT">">BlastN
        <OPTION VALUE="2" <TMPL_VAR NAME="TBLASTX_SELECT">">TBlastX
       </select>
   </td>
  <TR>
   <td>E-mail results? <input type=checkbox id=check_email onclick="toggle_email_field()"></td>
		<td><div class=email_box style="display:none;">Your E-mail Address: <input type=text id=email onBlur='address_validity_check()'>
		<br>
		<font id=email_error class="small" style="display: none; color: red;">You have supplied an invalid e-mail address.</font></div></td>
		<td><div class=email_box style="display:none;">Job Title:</div></td>
		<td><div class=email_box style="display:none;"><input type=text id=jobtitle> <input type=button value="Use Org Names" onClick="fill_jobtitle()"></div></td>

 <tr>
   <td>Master image width (0 == dynamic)  <input type=text name=master_width id=master_width size=6 value="<TMPL_VAR NAME="MWIDTH">">
 <TR>
   <TD>Regenerate dotplot images?
   <input type=checkbox name="regen_images" id="regen_images">
 <TR>
   <TD>Calculate substitution rates for syntenic protein coding gene pairs (slow)?
   <select name="ks_type" id = "ks_type">
     <option value = 0 <TMPL_VAR NAME=KS0> >--None--</option>
     <option value = ks <TMPL_VAR NAME=KS1> >Synonymous (kS)</option>
     <option value = kn <TMPL_VAR NAME=KS2> >Non-synonymous (kN)</option>
     <option value = kn_ks <TMPL_VAR NAME=KS3> >kN/kS</option>
   </select>
  <TR>
    <TD>Order contigs by best syntenic path?
   <input type=checkbox name="assemble" id="assemble"><br>
   <span class=small>This option assumes that one of the organisms is the reference genome, and the other is a whole genome shotgun sequence with contig level assembly</span>
<!--   <input type=checkbox name="gen_ks" id="gen_ks">-->
</TABLE>
</div> <!-- close tab-3 -->
</div> <!--close tabs div-->

</TMPL_IF>

<TMPL_IF NAME=ORG_MENU>
<td>
<div class="ui-widget-content resizable" style="float: left; padding: 0.3em">
<DIV class = "oblique">Organism <TMPL_VAR NAME="NUM">: </DIV>
   <DIV>Search <span class=small>Name: <input type="text" size=10 value="<TMPL_VAR NAME="ORG_NAME">" name = "org_name<TMPL_VAR NAME="NUM">" id="org_name<TMPL_VAR NAME="NUM">" style="font-style:italic" onFocus="search_bar('org_name<TMPL_VAR NAME="NUM">')" onKeyUp='timing("org_name<TMPL_VAR NAME="NUM">");'><span>
   Description: <input type="text" size=10 value="<TMPL_VAR NAME="ORG_DESC">" name = "org_desc<TMPL_VAR NAME="NUM">" id="org_desc<TMPL_VAR NAME="NUM">" style="font-style:italic" onFocus="search_bar('org_desc<TMPL_VAR NAME="NUM">')" onKeyUp='timing("org_desc<TMPL_VAR NAME="NUM">");'></DIV>
   <DIV id="org_list<TMPL_VAR NAME="NUM">"><TMPL_VAR NAME="ORG_LIST"></DIV>
   <Table><Tr>
     <td>Genome:
     <td><DIV id="dsg_menu<TMPL_VAR NAME="NUM">">
         <TMPL_VAR NAME="DSG_MENU">
         </div>

     <td>
     <DIV id="feattype_menu<TMPL_VAR NAME="NUM">">
     <TMPL_IF NAME="FEATTYPE_MENU">
       <TMPL_VAR NAME="FEATTYPE_MENU">
     <TMPL_ELSE>
      <input type=hidden id=feat_type<TMPL_VAR NAME="NUM">>
     </TMPL_IF>
         </div>
    <TR><Td colspan=3><div id="genome_message<TMPL_VAR NAME="NUM">"><TMPL_VAR NAME="GENOME_MESSAGE"></div>
     </table>
<DIV style="vertical-align: top;" id="dsg_info<TMPL_VAR NAME="NUM">"><TMPL_VAR NAME="DSG_INFO"></DIV>
</div>
</TMPL_IF>