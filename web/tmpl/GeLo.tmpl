
    <style type="text/css">
        #map {
            width: ;
            height: 300;
            border: 1px solid black;
        }
        #zoomLevel {
           bottom: 10px;
           left: 0px;
        }
        #gene {
            background-color: white;
            color:grey;
        }
        #local_dup {
//            background-color: cyan;
            color:cyan;
        }
/*        #pseudogene {
            background-color: orange;
            color:white;
        }
        #mrna {
            background-color: blue;
            color:white;
        }
        #cds {
            background-color: green;
            color:white;
        }
*/
        #gc {
            background-color: white;
             color:green;
	}
	#gaga {
	    background-color: white;
	    color: red;
        }
	#gbox {
	    background-color: white;
	    color: blue;
        }
	#wobble_GC_usage {
	    background-color: white;
	    color: purple;
        }
/*	#wobble_GC_usage_first_50 {
	    background-color: white;
	    color: purple;
        }
*/   
        #func_dom {
         //   background-color: white;
             color:orange;
        }
    </style>
<!--    <script src = "http://openlayers.org/api/2.6/OpenLayers.js"></script>-->

    <script src="js/OpenLayers.js"></script>
    <script src="js/Genomic.js"></script>
    <script src="js/opengenes.js"></script>

    <script type="text/javascript">
        if(! window.console){ console={}; console.log = console.debug = function(){}}

        var map, layers;
        var chr = '<TMPL_VAR NAME=CHR>';
        var version = '<TMPL_VAR NAME=VER>';
        var bp;
        var size= 285;
        var server =
        ['http://homer.cnr.berkeley.edu/CoGe/tiler.pl?','http://biocon.berkeley.edu/CoGe/tiler.pl?','http://synteny.cnr.berkeley.edu/CoGe/tiler.pl?'];
//        ['http://homer.cnr.berkeley.edu/CoGe/tiler.pl?','http://toxic.berkeley.edu/CoGe/tiler.pl?','http://biocon.berkeley.edu/CoGe/tiler.pl?','http://synteny.cnr.berkeley.edu/CoGe/tiler.pl?'];
//        ['http://toxic.berkeley.edu/CoGe/GenomePNG.pl?'];
        var org = "<TMPL_VAR NAME=ORG>";
        var ds = '<TMPL_VAR NAME=DS>';
        var loc = '<TMPL_VAR NAME=LOC>';
        var zoom = '<TMPL_VAR NAME=ZOOM>';
	zoom++;
        function init(){
            map = new OpenLayers.GenomeBrowser( $('#map')[0] , 
            {   
                 maxExtent: new
                 OpenLayers.Bounds(-50000,-10000,1000000000,10000),
                 units     :'bp',
                 tileSize: new OpenLayers.Size(768, size),
                 resolutions:[4096, 1024,256,64,16,4,1,0.25, 0.125, 0.0625, 0.03125, 0.015625],
//                 resolutions:[2048, 1024,512,256,128,64,32,16,8,4,2,1, 0.5, 0.25, 0.125, 0.0625, 0.032125, 0.015625],
                  controls: [new OpenLayers.Control.MouseDefaults()]
            });
            layers = [
            new OpenLayers.Layer.Genomic( "Ruler" , server
                 ,{'ds':ds, 'chr':chr,layers:"background,ruler",'version':version,'organism':org}
                 ,{isBaseLayer:true} 
             ),
            ]

            map.addLayers(layers);

            gc = new OpenLayers.Layer.Genomic( "<span id='gc'>GC content</span>" , server
                 ,{'ds':ds,'chr':chr,'version':version,layers:"gc",'organism':org}
                 ,{isBaseLayer:false}
             );
            gaga = new OpenLayers.Layer.Genomic( "<span id='gaga'>GAGA content</span>" , server
                 ,{'ds':ds,'chr':chr,'version':version,layers:"gaga",'organism':org}
                 ,{isBaseLayer:false}
             );
            gbox = new OpenLayers.Layer.Genomic( "<span id='gbox'>G-Box CACGTG</span>" , server
                 ,{'ds':ds,'chr':chr,'version':version,layers:"gbox",'organism':org}
                 ,{isBaseLayer:false}
             );
            genes = new OpenLayers.Layer.Genomic( "<span id='gene'>Genes</span>" , server
                 ,{'ds':ds,'chr':chr,layers:"pseudogene,gene,mRNA,CDS,rna",'version':version,'organism':org,}
                 ,{isBaseLayer:false}
             );
            wobble_GC_usage = new OpenLayers.Layer.Genomic( "<span id='wobble_GC_usage'>Wobble GC Usage</span>" , server
                 ,{'ds':ds,'chr':chr,'version':version,layers:"CDS,cbc",'organism':org}
                 ,{isBaseLayer:false}
             );
//            wobble_GC_usage_first_50 = new OpenLayers.Layer.Genomic( "<span id='wobble_GC_usage_first_50'>Wobble GC Usage (first 50 codons)</span>" , server
//                 ,{'ds':ds,'chr':chr,'version':version,layers:"CDS,cbc50",'organism':org}
//                 ,{isBaseLayer:false}
//             );
            local_dup = new OpenLayers.Layer.Genomic( "<span id='local_dup'>Local Duplicates</span>" , server
                 ,{'ds':ds,'chr':chr,layers:"local_dup",'version':version,'organism':org,}
                 ,{isBaseLayer:false}
             );

            prot = new OpenLayers.Layer.Genomic( "proteins" , server
                 ,{'ds':ds,'chr':chr,'version':version,layers:"protein",'organism':org}
                 ,{isBaseLayer:false}
             );
            func_domain = new OpenLayers.Layer.Genomic( "<span id='func_dom'>functional domains</span>" , server
                 ,{'ds':ds,'chr':chr,'organism':org,'ds':ds,'version':version,layers:"domain"}
                 ,{isBaseLayer:false}
             );
	    
            map.addControl(new OpenLayers.Control.LayerSwitcher())

            gc.setVisibility(<TMPL_VAR NAME="GC">);
            map.addLayer(gc);
            gaga.setVisibility(<TMPL_VAR NAME="GAGA">);
            map.addLayer(gaga);
            gbox.setVisibility(<TMPL_VAR NAME="GBOX">);
            map.addLayer(gbox);
            genes.setVisibility(<TMPL_VAR NAME="GENES">);
            map.addLayer(genes);
            wobble_GC_usage.setVisibility(<TMPL_VAR NAME="WOBBLEGC">);
            map.addLayer(wobble_GC_usage);
//            wobble_GC_usage_first_50.setVisibility(<TMPL_VAR NAME="WOBBLE50GC">);
//            map.addLayer(wobble_GC_usage_first_50);
            local_dup.setVisibility(<TMPL_VAR NAME="LOCALDUP">);
            map.addLayer(local_dup);
            func_domain.setVisibility(<TMPL_VAR NAME="FUNCDOMAIN">);
            map.addLayer(func_domain);
            prot.setVisibility(<TMPL_VAR NAME="PROT">);
            map.addLayer(prot);
            /*                                          zoomLevel */
            map.setCenter(new OpenLayers.BasePair(loc), zoom);
            bp = new OpenLayers.Control.MousePosition() 
            map.addControl(bp );
            map.addControl(new OpenLayers.Control.PanZoomBar());


            map.events.register('zoomend',map,updateZoom);
            map.events.triggerEvent('zoomend');

            map.events.register('mousedown',map,mapMouseDown);
            map.events.register('mouseup',map,mapMouseUp);
            map.events.register('mousemove',map,mapMouseMove);
            map.events.register('mouseout',map,mapMouseOut);
	    map.zoomOut();

        }

        function mapMouseDown(e){
        	  $('#popup').hide(0);
            map.lastMouseX = e.xy.x;
            map.lastMouseY = e.xy.y;
        }
        function mapMouseUp(e){
            var tx = e.xy.x;
            var ty = e.xy.y;
            var tot = Math.abs(map.lastMouseX - tx) 
                + Math.abs(map.lastMouseY - ty);
            if(4 > tot){
                // dont need to figure out basepairs from pixels
                // just use the ones in the window already.
                if(pageObj.getseq < 3)
                {
                    pageObj.getseq++;
                    var pos = parseInt(bp.element.innerHTML);
        			update_grab(pos);
        		}
        		else{
                	query(parseInt(bp.element.innerHTML));
                }
            }
        }
        
        
     function mapMouseOut(e) {
       if (pageObj.time) clearTimeout(pageObj.time);
     }

	function mapMouseMove(e) {
	  if ($('#popup_anno').is(':checked') == false) return;
	  if (pageObj.time) clearTimeout(pageObj.time);
	  if (parseInt(bp.element.innerHTML) <= 0) return;
       var mouse_x = e.pageX;
       var mouse_y = e.pageY;
            //alert(map.lastMouseX+","+map.lastMouseY);
       pageObj.time = setTimeout("info_popup('"+mouse_x+","+mouse_y+"')",1000);
     }
     
     function insert_query(html) {
        $('#popup').append(html);
     }
     
     function info_popup(position_str) {
       var position = position_str.split(",");
       var from_left = position[0];
       var document_width = $(window).width();
     //alert(document_width);
     //if (document_width <= (from_left + 150)) {from_left += document_width - (from_left+150) - 5;}
       var from_top = position[1];
       var html = "<a href='#' onClick=\"$('#popup').slideToggle(pageObj.speed);\" style='float: right;'><img src='/CoGe/picts/delete.png' width='16' height='16' border='0'></a>";
       $('#popup').css({position: "absolute", top: ""+from_top, left: ""+from_left}).html(html).slideDown(pageObj.speed);
       var url = 'FeatAnno.pl?chr='+ chr + '&version='+version+'&org='+org+'&loc='
       + parseInt(bp.element.innerHTML) +'&ds='+ds+'&name_only='+1;
       jfetch(url,insert_query);
     }
	
        function updateZoom(){
            $('#resolution').innerHTML = map.getResolution() + 'bp/pixel';

        }
        function query(x){
           var url = 'FeatAnno.pl?chr='
           + chr + '&version='+version+'&org='+org+'&loc='
           + x+'&ds='+ds; 
           jfetch(url,'query');
           var query_height = 1 - ($('#width').offset({scroll: false}).top / $(document).height());
           query_height *= $(document).height();
           $('#query').css("max-height",""+query_height).show(0);
           $('#hide_query').show(0);
         }
         
 function onEnter(e){
  if (!e){ 
   var e = window.event;}
  if(e.which == 13){
    $('#map').css('width',$('#width').val());
    updateZoom();}
}

 function update_grab(pos){
  var val = $('#grab_from').val();
  grab_sequence(['args__'+pos,'args__'+val],[insert_grab_vals]);
}

 function insert_grab_vals(from,to){
  if(pageObj.getseq*1 -1 == 1){
    $('#grab_from').css('backgroundColor','white').val(to);
    $('#grab_to').css('backgroundColor','FFFF66');
  }
  else{
  $('#grab_from').val(from);
  $('#grab_to').css('backgroundColor','white').val(to);
  }
 }

function launch_seqview(dsid, chr)
 {
   start = $('#grab_from').val();
   stop = $('#grab_to').val();
   window.open("SeqView.pl?dsid="+dsid+"&chr="+chr+"&start="+start+"&stop="+stop);
 }

function change_gene_model_type()
 {
   var goods = [genes, wobble_GC_usage];
   for (var i in goods)
    {
      if ($('#flat_models').is(':checked') == true)
       {
         goods[i].params.layers +=',flat';
       }
      else
       {
         goods[i].params.layers = goods[i].params.layers.replace(',flat','');
       }
      if ($('#overlap_models').is(':checked') == true)
       {
         goods[i].params.layers +=',olc';
       }
      else
       {
         goods[i].params.layers = goods[i].params.layers.replace(',olc','');
       }
	 goods[i].redraw();
    }
 }

function go_save_options() {

var show_gc =gc.visibility;
var show_gaga =gaga.visibility;
var show_gbox =gbox.visibility;
var show_genes =genes.visibility;
var show_wobblegc =wobble_GC_usage.visibility;
//var show_wobble50gc =wobble_GC_usage_first_50.visibility;
var show_localdup =local_dup.visibility;
var show_funcdomain =func_domain.visibility;
var show_prot =prot.visibility;
save_options([
'args__flat','args__'+$('#flat_models').is(':checked'), 
'args__expand','args__'+$('#overlap_models').is(':checked'), 
'args__popupanno','args__'+$('#popup_anno').is(':checked'), 
'args__gc','args__'+show_gc,
'args__gaga','args__'+show_gaga,
'args__gbox','args__'+show_gbox,
'args__genes','args__'+show_genes,
'args__wobblegc','args__'+show_wobblegc,
//'args__wobble50gc','args__'+show_wobble50gc,
'args__localdup','args__'+show_localdup,
'args__funcdomain','args__'+show_funcdomain,
'args__prot','args__'+show_prot,
],[]);
}

$(document).ready(function(){
pageObj.getseq = 3;
$('#width').val($('#main').width());
$('#map').css('width',$('#width').val());
init();
change_gene_model_type();

});

    </script>
    <div id="main"></div>
    <div id="popup" class="genomeview_popup" style="display: none"></div>
    <div id="map"></div>
    <div id='resolution'></div>
    <div id ='alert_grab'></div>
<div style="float:left">
OpenGene's map width: <input type=textbox class=backbox size=5 id="width" onkeypress="onEnter(event);" value=<TMPL_VAR NAME="width"> />
<input type=button value="Resize" onclick="$('#map').css('width',$('#width').val());updateZoom();" />
<input type=button value="Full-Window" onclick="$('#map').css('width',''+$('#main').width());updateZoom();" /> 

<input type=button value="Grab Sequence" onclick="$('#grab').show(0);$('#grab_from').css('backgroundColor','FFFF66');pageObj.getseq=1;" />

    <div id='grab' style="display:none;"><input type=text id='grab_from' value=0> to <input type=text id="grab_to" value=0> <input type=button value="View Sequence" onClick="launch_seqview('<TMPL_VAR NAME=DS>','<TMPL_VAR NAME=CHR>')"></div>
<input id='hide_query' style="display: none; float:left" type=button value="Hide Feature Info" onclick="$('#query').slideToggle(pageObj.speed);$('#hide_query').hide(0);" />

</div>

    <TMPL_IF NAME="SAVE_SETTINGS">
    <div align="right"><input type=button value="Save Settings" name="SaveSettings" id="SaveSettings" onclick="go_save_options();"></div>
    </TMPL_IF>



    <div align="right">Flat Gene Models<input type=checkbox name=flat_models id=flat_models onclick="change_gene_model_type();" <TMPL_VAR NAME=FLAT> /></div>
    <div align="right" >Expand Overlapping Gene Models<input type=checkbox name=overlap_models id=overlap_models onclick="change_gene_model_type();" <TMPL_VAR NAME=EXPAND> /></div>
    <div id='check' style="float:right">Pop-up Annotations<input type=checkbox name="popup_anno" id="popup_anno" <TMPL_VAR NAME=POPUPANNO> /></div>
    <div id='query' style="float: left; overflow: auto;">

</div>

