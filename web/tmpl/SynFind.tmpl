<TMPL_IF NAME="FRONT_PAGE">
<tmpl_if name="beta">
    <div class="small" style="padding-bottom: 5px; color: dimgray;">
        <span class="large">Welcome to the <span class="alert">new beta version</span> of SynFind.</span><br>If you experience any difficulties
        or prefer to use the old version, please <a id="beta_link" href="SynFind_old.pl">click here</a>.
        <br>
    </div>
</tmpl_if>

<aside class="info">
	<p><a class="bold" href="http://genomevolution.org/wiki/index.php/SynFind" target="_blank">SynFind</a> identifies syntenic regions against any set of genomes given a gene in one genome.
		<span class="link" onClick="$(this).remove(); $('#getting_started').fadeIn();">More...</span>
	</p>
	
	<div id="getting_started" class="hidden" style="max-width:90%;">
		<p>Complete syntenic gene-sets can be downloaded, and syntenic depth tables are
		generated to access the polyploidy level between the query genome and each 
		target genome.</p>
	</div>
</aside>

<div id="tabs" class="hidden" style='margin-top: 0.5em'>
    <ul>
    	<li class="small">
        	<a href="#tab1"><span>Configure Search</span></a>
        </li>
        <li class="small">
        	<a href="#tab2"><span>Configure Parameters</span></a>
        </li>
    </ul>

<div id="tab1">
	<span id="run_synfind_button" style="font-size: 1em" class='ui-button ui-button-go ui-corner-all'>Run SynFind</span><BR><br>
	<TMPL_INCLUDE NAME='widgets/GenomeSelect.tmpl'> 
	<br>

	<table class="ui-widget-content ui-corner-all" style="padding-right:5px;">
		<tr><td colspan="2"><b>Specify Feature</b></td></tr>
		<TR class="small">
			<td nowrap style="padding-left:5px;padding-top:7px;">Name:</td>
			<td>
				<input type="search" name="accn" id="accn" tabindex="1"  size="20" placeholder="Search" value="<TMPL_VAR NAME=ACCN>" onkeypress="onEnter(event);"/>
			</td>
		</tr> 
		<tr class="small">
			<TD nowrap style="padding-left:5px;padding-bottom:6px;">Annotation:</td>
			<td nowrap>
				<input type="search" name="annosearch" id="annosearch" tabindex="1"  size="20" placeholder="Search" value="<TMPL_VAR NAME=ANNO>" onkeypress="onEnter(event);"/>
			</td>
		</tr>
		<TR class="small">
			<td valign="top" nowrap style="padding-left:5px;">Organism:</td>
			<TD>
				<input type="search" size="20" placeholder="Search" name="org_name_desc_feat" id="org_name_desc_feat" onKeyUp='get_orgs_feat();'><br>
				<DIV id="org_list_feat" style="padding-top:5px;"><TMPL_VAR NAME="ORG_LIST_FEAT"></DIV>
			</td>
		</tr>
		<tr class="small">
			<td><span class="ui-button ui-corner-all" onclick="search_chain(1)">Search</span></td>
		</tr>
	</table>

	<br>

	<table id="data_table" class="hidden">
	 <thead style="text-align:left;">
	  <th>Matches</th>
	  <th style="min-width:60px">Types</th>
	  <th>Genomes</th>
	 </thead>
	 <tbody class="small">
	 <tr valign="top">
	  <td valign="top">
	   <DIV id="accn_list"><input type="hidden" id="accn_select"></DIV>
	  </td>
	  <td valign="top">
	    <DIV id="FeatType"></DIV>
	  </td>
	  <td valign="top">
	   <DIV id="Source"><TMPL_VAR NAME="FEAT_DSGID"></DIV>
	 </tbody>
	</table>

	<br>

	<DIV id="fid" class="hidden"><TMPL_VAR NAME="FID"></div>
	
	<DIV id="anno" class="hidden"></DIV>

</div> <!--close tab 1-->
 
 
<div id="tab2">
	<strong>General parameters</strong>
	<TABLE class='small'>
		<TR>
			<TD>Comparison Algorithm: </TD>
			<TD>
				<select id='algo'>
					<option value='last' <TMPL_VAR NAME=LAST>>Last</option>
					<option value='lastz' <TMPL_VAR NAME=LASTZ>>LastZ</option>
				</select>
			</TD>
		</TR>
		</table>
		<br>
		
		<strong>Syntney finding parameters</strong>
		<table class='small'>
			<TR>
				<TD>Gene window size: </TD>
				<TD><input id='ws' type='text' size='3' value='<TMPL_VAR NAME=WS>'></TD>
			</TR>
			<TR>
				<TD>Minimum number of genes: </TD>
				<TD><input id='co' type='text' size='3' value='<TMPL_VAR NAME=CO>'></TD>
			</TR>
			<TR>
				<TD>Scoring Funciton: </TD>
				<TD>
					<select id='sf'>
						<option value='1' <TMPL_VAR NAME=SF_COLLINEAR> >Collinear</option>
						<option value='2' <TMPL_VAR NAME=SF_DENSITY> >Density</option>
					</select>
				</TD>
			<TR>
				<TD>Max Syntenic Depth: <br><span class='small note'>(leave blank for unlimited)</span></TD>
				<TD><input id='sd' type='text' size='3' value='<TMPL_VAR NAME=SD>'></TD>
			</TR>
		</TABLE>
		</TR>
	</TABLE>
</div> <!--close tab 2-->

</div> <!--close all tabs-->

</TMPL_IF>


<TMPL_IF NAME="RESULTS_DIV">
	<DIV id="log_text" class='dna hidden' style="padding:15px;width:100%;border-top:1px solid lightgray;"></DIV>
	<DIV id="results" class="hidden" style="padding:15px;border-top:1px solid lightgray;"></DIV>
	<div id="feature_info_popup" class="hidden dialog_box" title="Feature Information"></div>
</TMPL_IF>


<TMPL_IF NAME="JAVASCRIPT">
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.tablesorter.2.0.3.js"></SCRIPT>
<SCRIPT language="JavaScript">
var spinner = '<img src="picts/ajax-loader.gif"/>';

$(function() {
	$.ajaxSetup({
		type: "GET",
		url: '<TMPL_VAR NAME="PAGE_NAME">',
		dataType: "html",
		cache: false,
	});
	
    $(".dialog_box").dialog({ autoOpen: false, width: 500 });

    $("#tabs").tabs().show();
    
    $("#run_synfind_button").on("click", function() {
        ga('send', 'event', 'synfind', 'run'); // for analytics
        launch();
    });
	
	setTimeout(function() {	<TMPL_VAR NAME="DOCUMENT_READY"> }, 100 );
});

//function loading(id, msg) {
//	$('#'+id).html('<font class="loading">Loading '+msg+' . . .</font>');
//}

//function counting(){
//	var count = $('#genome_choice').getLength();
//	if (count == 0) {
//		$('#genome_choice').html('<option id=blank value=null>No Organism Selected</option>');
//	}
//	$('#selected_genome_count').html(count);
//}

//function update_basename(basename){
//    pageObj.basename = basename;
//}
//
//function reset_basename(){
//    if (pageObj.basename) pageObj.basename = 0;
//}
//
//function generate_basefile() {
//	$.ajax({
//		data: {
//			fname: 'generate_basefile',
//		},
//		success : function(filename) {
//			update_basename(filename);
//		}
//	});
//}

function launch() {
	var fid = $('#fid').html();
	if (!fid) {
		alert('Please search and select a feature for this analysis.')
		return;
	}
	
//	if (!pageObj.basename) {
//		setTimeout("launch()", 100);
//		return;
//	}
	
	var check = $('#genome_choice').getLength();
	if( $('#blank').val() || check == 0 ){
		alert('Please select at least one genome to search.');
		return;
	}
	
	$('html, body').animate({scrollTop: 0}, 500);
	
//	pageObj.nolog = 1;
	pageObj.waittime = 1000;
//	monitor_log();
	
	$('#results').slideUp('fast', 
			function() { 
				$('#results').html('');
				$('#log_text').slideDown();
			});
	
	var selected_genomes = $('#genome_choice').getLength(1);
	var qdsgid = $('#feat_dsgid').val();
	var ws = $('#ws').val();
	var co = $('#co').val();
	var sf = $('#sf').val();
	var algo = $('#algo').val();
	var sd = $('#sd').val();
	
	//go(['args__dsgids','args__'+selected_genomes,'args__fid','fid',
	//'args__qdsgid','feat_dsgid', 'args__basename','args__'+pageObj.basename,
	//'args__window_size','ws', 'args__cutoff','co', 'args__scoring_function','sf',
	//'args__algo','algo', 'args__depth','sd'],[handle_results],'POST');
	
	// Sends to JEX and blocks until completion
	$.ajax({
		type: 'POST',
        dataType: 'html',
		data: {
			fname: 				'go_synfind',
			dsgids: 			selected_genomes,
			fid: 				fid,
			qdsgid: 			qdsgid,
			window_size: 		ws,
			cutoff: 			co,
			scoring_function: 	sf,
			algo: 				algo,
			depth: 				sd
		},
		success : function(html) {
			handle_results(html);
		},
	});
}

//function show_add() {
//  if($('#add').is(":hidden")) {
//    $('#remove').hide(0);
//    $('#add').show(0);
//  }
//}

//function org_search(desc_search){
//  if (pageObj.time){
//   clearTimeout(pageObj.time);
//  }
//  name = $('#org_name').val();
//  desc = $('#org_desc').val()
//  if (desc_search) {
//    if ( pageObj.prev_desc == desc ) {return;}
//    pageObj.time = setTimeout("get_orgs(['args__desc','args__'+desc], ['org_list']);",500);
//    setTimeout("pageObj.prev_desc=desc",500);
//    pageObj.prev_name="";
//   }
//  else
//   {
//    if ( pageObj.prev_name == name) {return;}
//    pageObj.time = setTimeout("get_orgs(['args__name','args__'+name], ['org_list']);",500);
//    setTimeout("pageObj.prev_name=name",500);
//    pageObj.prev_desc="";
//
//   }
//  setTimeout("seq_type_search()",600);
//}

//function seq_type_search() {
// if (ajax.length)
//    {
//     setTimeout("seq_type_search()",500);
//    }
//  else if ($('#org_id').val()) {
//    gen_dsg_menu(['args__oid', 'org_id'],['org_seq_types']);
//    show_add();
//   }
//  else {
//   $('#org_seq_types').html('');
//   $('#add').hide(0);
//  }
//}

//function monitor_log(log) {
//	var fasta = "";
//	var blast = 0;
//	var results = 0;
//	var done = 0;
//	var match;
//	pageObj.finished = 0;
//	
//	if (log) {
//		if (log.match(/\*\s+fasta\sfile/i)) {
//			fasta="Generating blastable databases . . . <br/>";
//			match=log.match(/\*(.+)\*\sblastdb/g);
//			if (match) {
//				var crappy_workaround;
//				for (i=0;i<match.length;i++) {
//					crappy_workaround = match[i].match(/\*(.+)\*/);
//					fasta += "&nbsp;&nbsp;&nbsp;"+crappy_workaround[1]+" database built!<br/>";
//				}
//			}
//		}
//		
//		if (log.match(/running/i)) {
//			fasta += "Blastable databases generation done!<br/>";
//			
//			var blast_program = log.match(/-p\s(\w+)\s/);
//			if (!blast_program)
//				blast_program = log.match(/(blastz)/);
//			blast="Running blast algorithm . . . <br/>";
//			
//			match=log.match(/\*(.+)\*\sblast\sanalysis\scomplete/g);
//			if (match) {
//				var crappy_workaround;
//				for (i=0;i<match.length;i++) {
//					crappy_workaround = match[i].match(/\*(.+)\*/);
//					blast += "&nbsp;&nbsp;&nbsp;"+crappy_workaround[1]+" complete!<br/>";
//				}
//			}
//		}
//		
//		if (log.match(/Results/i)) {
//			blast += "Analysis complete!<br/>";
//			results = "Collating results. . . ";
//		}
//		if (log.match(/Finished/i)) {
//			results += "done!<br/>";
//			done = "Displaying results.  This may take your browser some time to process the HSP table.  Please be patient."
//			pageObj.finished = 1;
//		}
//	}
//	else {
//		pageObj.nolog += 1;
//	}
//	
//	var message = "Initializing search . . . ";
//	if (fasta) message += "done!<br/>"+fasta;
//	if (blast) message += blast;
//	if (results) message = results;
//	if (done) message += done;
//	
//	if ( !pageObj.finished && pageObj.nolog < 20 ) {
//		pageObj.waittime = pageObj.waittime*2;
//		if (pageObj.waittime > 60*1000)
//			pageObj.waittime = 60*1000;
//		message += "<br/>Next progress check in "+pageObj.waittime/1000+" seconds.";
//		setTimeout("monitor_log()", pageObj.waittime);
//	}
//	if (message) 
//		$('#log_text').html("<div class='small'>"+message+'</div>');
//}

function update_status() {
	

}

//function clear_org_list()
// {
// $('#genome_choice').empty();
// counting();
// }


//function remove_selected_orgs() {
// $('#genome_choice option:selected').each(function(){
//    $('#'+$(this).val()).remove();
//    });
// counting();
// }

//function add_all_orgs() {
// var ids;
// var count =0;
// $('#org_id option').each(function(){
//     ids = ids+","+$(this).val();
//     if (count == 100)
//      {
//         get_dsg_for_search_menu(['args__orgid','args__'+ids],[add_to_list])
//         ids = "";
//         count =0;
//      }
//
//     count++;
//   });
// get_dsg_for_search_menu(['args__orgid','args__'+ids],[add_to_list])
// sort_genome_choice();
//}

//function add_selected_orgs() {
// var ids;
// var count =0;
// $('#org_id option:selected').each(function(){
//     ids = ids+","+$(this).val();
//     if (count == 100)
//      {
//         get_dsg_for_search_menu(['args__orgid','args__'+ids],[add_to_list]);
//         ids = "";
//         count =0;
//      }
//
//     count++;
//    });
//  if (count == 1)
//   {
//        if ($('#dsgid').length > 0) { // mdb tempfix for issue #21
//            get_dsg_for_search_menu(['args__dsgid','dsgid'],[add_to_list]);
//        }
//   }
//  else
//   {
//    get_dsg_for_search_menu(['args__orgid','args__'+ids],[add_to_list]);
//   }
//  sort_genome_choice();
//}

//function add_to_list(stuff){
//  var orgs = stuff.split(':::');
//  for (var i=0; i < orgs.length; i++)
//   {
//     var item = orgs[i].split('::');
//     id = item[0];
//     org = item[1];
//     if (!id && !org) {continue;}
//     var check = $('#'+id).val();
//     if (check){ continue; }
//     var html = '<option id='+id+' value='+id+' ondblclick="remove_selected_orgs();">'+org+'</option>';
//     $('#blank').remove();
//     $('#genome_choice').append(html);
//   }
//  counting();
//}

//function sort_genome_choice() {
//    if (ajax.length)
//     {
//       setTimeout("sort_genome_choice()",100);
//       return;
//     }
//   $('#genome_choice').append().sortSelect();
//}

$.fn.getLength = function(val){
  var opt_length;
  var searchable;
  var blanked=0; //otherwise get math problems later...boo javascript
  this.each(
    function()
    {
        var opts = this.options;
        opt_length = opts.length;
        if (opt_length == 0) {return opt_length;}
        searchable = opts[0].id;
        if (searchable == 'blank') {blanked++;} //Counts the number of instances of blank
        if (val){
          for(var i=1;i<opts.length;i++)
          {
            searchable += ","+opts[i].id;
            //need to chopoff last comma
          }
        }
    }
  );
  if(val) return searchable;
  if (blanked) {opt_length-=blanked;} //subtract elements that are classified as blank above
  return opt_length;
};

$.fn.sortSelect = function(){
  this.each(
      function()
      {
        if(this.nodeName.toLowerCase() != "select"){
          return;}
        var opts = this.options;
        var sortArray = [];
        for(var i=0;i<opts.length;i++)
        {
            sortArray[i] = {
                    v: opts[i].value,
                    t: opts[i].text,
                    d: opts[i].id,
                    }
        }
        sortArray.sort(
                function(obj1,obj2)
                {
                    obj1t = obj1.t.toLowerCase(),
                    obj2t = obj2.t.toLowerCase();
                    if(obj1t == obj2t){
                      return 0;}
                    return obj1t < obj2t ? -1 : 1;
                }
        );
        for(var i=0;i<opts.length;i++)
        {
            opts[i].id = sortArray[i].d;
            opts[i].text = sortArray[i].t;
            opts[i].value = sortArray[i].v;
        }
      }
    );
    return this;
};

function handle_results(html) {
	clearTimeout();
	$('#log_text').hide(0);
	$('#results').slideUp().html(html).slideDown();
	init_table_sorter();
	setup_button_states();
}

/*------------------------------------------------------------------------------
	Feature Search 
------------------------------------------------------------------------------*/

function search_chain(val) {
	$('#data_table').show(0);
	$('#anno,#accn_list,#Source,#FeatType').hide();
	
	var accnminlen = 3;
	var annominlen = 8;
	
	if ( val == 1 
		|| $('#accn').val().length > accnminlen 
		|| $('#annosearch').val().length > annominlen ) 
	{
		$('#anno').html(spinner).show();
		go_cogefeatsearch();
	}
	else {
		$('anno').html('Search not run.').show();
	}
}

function go_cogefeatsearch() {
	$('#fid').html('');
	var accn = $('#accn').val();
	var annosearch = $('#annosearch').val();
	var org_id = $('#org_id_feat').val();
	var org_name_desc = $('#org_name_desc_feat').val();
	
	//cogefeatsearch(['args__accn','accn', 'args__anno','annosearch',
	//'args__org_id','org_id_feat', 'args__org_name','org_name_feat',
	//'args__org_desc','org_desc_feat'],[source_search_chain]);
	$.ajax({
		data: {
			fname: 		'cogefeatsearch',
			accn: 		accn,
			anno: 		annosearch,
			org_id: 	org_id,
			org_name_desc: 	org_name_desc,
		},
		success : function(data) {
			source_search_chain(data);
		},
	});
}

function source_search_chain(val) {
	if (val) {
		$('#accn_list').html(val).show();
	}
	else {
		$('#fid').html('');
	}
	$('#Source').html(spinner);
	$('#FeatType').html(spinner);
	$('#anno').html('');
	
	var accn = $('#accn_select').val()[0];
	var org_id = $('#org_id_feat').val();
	var org_name_desc = $('#org_name_desc_feat').val();
	
	//source_search(['args__accn','accn_select', 'args__org_id','org_id_feat',
	//'args__org_name','org_name_feat','args__org_desc','org_desc_feat'], [get_types_chain]);
	$.ajax({
		data: {
			fname: 		'source_search',
			accn: 		accn,
			org_id: 	org_id,
			org_name_desc: 	org_name_desc,
		},
		success : function(data) {
			get_types_chain(data);
		},
	});
}

function get_types_chain(val) {
	if (val) {
		$('#Source').html(val).show();
	}
	
	var accn = $('#accn_select').val()[0];
	var dsgid = $('#feat_dsgid').val()[0];
	
	//get_types(['args__accn','accn_select', 'args__dsgid','feat_dsgid'],[get_anno_chain]);
	$.ajax({
		data: {
			fname:		'get_types',
			accn:		accn,
			dsgid:		dsgid,
		},
		success : function(data) {
			var obj = jQuery.parseJSON(data);
			if (obj) {
				get_anno_chain(obj.html, obj.dsgid);
			}
		},
	});	
}

function get_anno_chain(val, dsgid, fid) {
	if (val) {
		$('#FeatType').html(val).show();
		if ($('#add_all').is(":hidden")) {$('#add_all').show(0);}
		if ($('#remove').is(":hidden")) {$('#remove').show(0);}
		if ($('#clear').is(":hidden")) {$('#clear').show(0);}
		if ($('#send').is(":hidden")) {$('#send').show(0);}
	}
	
	var accn;
	if ( $('#accn_select').length )
		accn = $('#accn_select').val()[0];
	var type;
	if ( $('#type_name').length )
		type = $('#type_name').val()[0];
	
	$('#anno').html(spinner).show();
	
	//get_anno(['args__accn','accn_select', 'args__type','type_name', 'args__dsgid','args__'+dsgid],[show_anno]);
	$.ajax({
		data: {
			fname:	'get_anno',
			fid:    fid,
			accn:	accn,
			type:	type,
			dsgid:	dsgid
		},
		success : function(data) {
			var obj = jQuery.parseJSON(data);
			if (obj) {
				show_anno(obj.anno, obj.fid);
			}
		},
	});	
}

function show_anno(anno, fid) {
	$('#anno').html(anno);
	$('#fid').html(fid);
	setup_button_states();
}

function get_orgs_feat() {
	var searchterm = $('#org_name_desc_feat').val();
	
	$.ajax({
		data: {
			fname:	'get_orgs_feat',
			search:	searchterm,
		},
		success : function(html) {
			$('#org_list_feat').html(html);
		},
	});		
}

function onEnter(e){
	if (!e) {
		var e = window.event;
	}
	if (e.which == 13){
		search_chain(1);
	}
}

function update_info_box(featid) {
	generate_feat_info(featid); //generate_feat_info(['args__'+featid],['feature_info_popup']);
	$('#feature_info_popup').dialog('open');
}

function generate_feat_info(featid) {
	$.ajax({
		data: {
			fname:	'generate_feat_info',
			featid:	featid
		},
		success : function(html) {
			$('#feature_info_popup').html(html);
		},
	});	
}

function init_table_sorter() {
	$(function() {
		$("#syntelog_table").tablesorter({
	        sortClassAsc: 'headerSortUp',       // Class name for ascending sorting action to header
	        sortClassDesc: 'headerSortDown',    // Class name for descending sorting action to header
	        headerClass: 'header',          	// Class name for headers (th's)
	        widgets: ['zebra'],
	        //textExtraction: 'complex',
	    });
	});
}

function get_master(link) {
	pad = $('#pad').val();
	pad = pad*1;
	if (pad) {
		link += ";pad="+pad;
	}
	window.open(link);
}
</SCRIPT>
</TMPL_IF>
