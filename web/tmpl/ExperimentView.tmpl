<TMPL_IF NAME=MAIN>
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.tablesorter.2.0.3.js"></SCRIPT>
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.tablesorter.pager.js"></SCRIPT>
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.fileupload.js"></SCRIPT>
<SCRIPT language="JavaScript">

$(document).ready(function(){
	$.ajaxSetup({
		type: "GET",
		url: "<TMPL_VAR NAME='PAGE_NAME'>",
		dataType: "html",
		cache: false,
	});
	
	$(".dialog_box").dialog({autoOpen: 0, width:450});
     
	pageObj.timers = new Array();
});

function get_experiment_info(opts){
	if (!opts){opts={};}
	divid = opts.divid; //were results will be displayed in page
	// create a new closure who's scope does *not*
	// include the `divid` value so that callback will 
	// not clobber the `divid` variable 
	var create_callback = function(divid) {
		var local_divid = divid;
		return function (data) {
			$('#'+local_divid).html(data);
			//set_table();
		};
	}; 

	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_experiment_info',
			eid: "<TMPL_VAR NAME='EID'>",
		},
		success : function (data) {
			$('#experiment_info').html(data);
		}
	});
}

function format_box_info (data) {
	output = data.output;
	return output;
}

function edit_experiment_info () {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'edit_experiment_info',
			eid: "<TMPL_VAR NAME='EID'>",
		},
		success : function(data) {
			data = eval('('+data+')');
			$("#experiment_info_edit_box").dialog("option", "title", data.title);
			$("#experiment_info_edit_box").html(format_box_info(data));
			$("#experiment_info_edit_box").dialog('open');
			//setup_button_states();
		},
	});
}

function update_experiment_info (){
	name = $('#edit_name').val();
	if (!name) {
		alert('Error: Must have a name');
		return;
	}
	
	genome_id = parseInt( $('#edit_genome_id').val() );
	if (!genome_id) {
		alert('Error: Must be assigned to a genome');
		return;	
	}
	
	version = $('#edit_version').val();
	if (!version) {
		alert('Error: Must have a version');
		return;	
	}	
	
	source_id = parseInt( $('#edit_source_id').val() );
	if (!source_id) {
		alert('Error: Must have a source');
		return;	
	}	
	
	desc = $('#edit_desc').val();
	
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'update_experiment_info',
			eid: "<TMPL_VAR NAME='EID'>",
			name: name,
			desc: desc,
			genome_id: genome_id,
			source_id: source_id,
			version: version
		},
		success : function(val) {
			$("#experiment_info_edit_box").dialog('close');
			get_experiment_info();
		},
	});
}

function get_sources () {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_sources'
		},
		success : function(val) {
			var items = jQuery.parseJSON(val);
			$("#edit_source").autocomplete("option", "source", items);
			$("#edit_source").autocomplete("search");
		},
	});
}

function make_experiment_public () {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'make_experiment_public',
			eid: "<TMPL_VAR NAME='EID'>",
		},
		success : function(val) {
			get_experiment_info();
		}
	});
}

function make_experiment_private () {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'make_experiment_private',
			eid: "<TMPL_VAR NAME='EID'>",
		},
		success : function(val) {
			get_experiment_info();
		},
	});
}

function add_experiment_type () {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'add_experiment_type',
			eid: "<TMPL_VAR NAME='EID'>",
		},
		success : function(data) {
			data = eval('('+data+')');
			$("#experiment_type_edit_box").dialog({
				title: data.title,
				beforeClose: 
					function() {
						$("#edit_type_name").autocomplete('close');
					}				
			});
			$("#experiment_type_edit_box").html(format_box_info(data));
			$("#experiment_type_edit_box").dialog('open');
			//setup_button_states();
		},
	});
}

function add_type_to_experiment () {
	name = $('#edit_type_name').val();
	description = $('#edit_type_description').val();
	
	if (name) {
		$.ajax({
			data: {
				jquery_ajax: 1,
				fname: 'add_type_to_experiment',
				eid: "<TMPL_VAR NAME='EID'>",
				name: name,
				description: description
			},
			success : function(val) {
				$("#experiment_type_edit_box").dialog('close');
				get_experiment_info();
			},
		});
	}
	else { alert ('Error: Must have type name specified!');}
}

function remove_experiment_type (opts) {
	etid = opts.etid;
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'remove_experiment_type',
			eid: "<TMPL_VAR NAME='EID'>",
			etid: etid,
		},
		success : function(val) {
			get_experiment_info();
		},
	});
}

function add_annotation () {
	var annotation = $('#edit_annotation').val();
	var type = $('#edit_annotation_type').val();
	
	if (annotation && type) {
		var type_group = $('#edit_annotation_type_group').val();
		var link = $('#edit_link').val();
	
		var annotation_image_file = $('#edit_annotation_image')[0].files[0];

		if (annotation_image_file) {		
			ext = annotation_image_file.name.split('.').pop();
			if (ext != 'jpg' && ext != 'gif' && ext != 'png') {
				alert('Error: specified file is not an image');
				return;
			}
	
			if (annotation_image_file.size > 1*1024*1024) {
				alert('Error: image file is too large (>1MB)');
				return;
			}
			
			$("#wait_annotation").animate({opacity:1});
		}
		else {
			annotation_image_file = '';
		}
		
		$('#edit_annotation_image').fileupload({
        	dataType: 'json',
			done: 
				function(e, data) {
					$("#wait_annotation").hide();
					$("#experiment_annotation_edit_box").dialog('close');
					get_experiment_annotations();				
				}
		});

		$('#edit_annotation_image').fileupload('send', {
			files: annotation_image_file,
			formData: {
				fname: 'add_annotation',
				eid: "<TMPL_VAR NAME='EID'>",
				type_group: type_group,
				type: type,
				annotation: annotation,
				link: link
			}
		});			
	}
	else { alert ('Error: Must have type and annotation specified!');}
}

function get_experiment_annotations() {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_experiment_annotations',
			eid: "<TMPL_VAR NAME='EID'>",
		},
		success : function(data) {
			$('#experiment_annotations').html(data);
		}
	});
}

function remove_experiment_annotation (opts) {
	eaid = opts.eaid;
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'remove_experiment_annotation',
			eid: "<TMPL_VAR NAME='EID'>",
			eaid: eaid,
		},
		success : function() {
			get_experiment_annotations();
		},
	});
}

function search_genomes () {
	search_term = $("#edit_genome").val();
	if (search_term.length > 2) {
		$.ajax({
			data: {
				jquery_ajax: 1,
				fname: 'search_genomes',
				search_term: search_term,
			},
			success : function(val) {
				var items = jQuery.parseJSON(val);
				$("#edit_genome").autocomplete("option", "source", items);
				$("#edit_genome").autocomplete("search");
			},
		});
	}
}

function clear_edit_genome() {
	$("#edit_genome").val('');
	$("#edit_genome_id").val(0);		
}

function get_experiment_types () {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_experiment_types'
		},
		success : function(val) {
			var items = jQuery.parseJSON(val);
			$("#edit_type_name").autocomplete("option", "source", items);
			$("#edit_type_name").autocomplete("search");
		},
	});
}

function get_type_description (name) {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_type_description',
			name: name
		},
		success : function(data) {
			$("#edit_type_description").html(data);
		},
	});
}

function image_preview(obj, preview) {
	var id = obj.src; // need a unique identifier for the obj
	if (pageObj.timers[id]) {
		clearInterval(pageObj.timers[id]);
		pageObj.timers[id] = null;
	}
	
	if (preview) {
		pageObj.timers[id] = setTimeout( 
			function() { 
				$(obj).animate({width:200, height:200});
				pageObj.timers[id] = null; 
			}, 
			500 
		);
	}
	else {
		pageObj.timers[id] = setTimeout( 
			function() { 
				$(obj).animate({width:40, height:40});
				pageObj.timers[id] = null;  
			}, 
			500 
		);
	}
}
</SCRIPT>

<div>
 Experiment Info:<br>
 <div id='experiment_info'>
  <TMPL_VAR NAME="EXPERIMENT_INFO">
 </div>
</div>

<br>

<div>
 Experiment Annotations:<br>
 <div id="experiment_annotations">
  <TMPL_VAR NAME="EXPERIMENT_ANNOTATIONS">
 </div>
</div>

<div id="experiment_info_edit_box" class="dialog_box"></div>
<div id="experiment_type_edit_box" class="dialog_box"></div>
<div id="experiment_annotation_edit_box" class="dialog_box" title="Add Annotation">
  <TMPL_INCLUDE NAME='widgets/AddAnnotation.tmpl'>
</div>

</TMPL_IF> <!-- MAIN -->



<TMPL_IF NAME="EDIT_EXPERIMENT_INFO">
<SCRIPT>
	$("#edit_source").autocomplete({
	    source: 
	    	function() {
	    		get_sources();
	    	},
	    select:	
	    	function(event, ui) {
	    		$("#edit_source").val( ui.item.label );
	    		$("#edit_source_id").val( ui.item.value );
	    		return false;
	    	}
	});

	$("#edit_genome").autocomplete({
	    source: [],
	    select: 
	    	function(event, ui) {
	    		$("#edit_genome").val( ui.item.label );
	    		$("#edit_genome_id").val( ui.item.value );
	    		return false;
	    	}
	});
</SCRIPT>
<table class="small">
 <tr>
  <td>Name:</td>
  <td><input id="edit_name" type="textbox" size="53" value="<TMPL_VAR NAME=NAME>"></td>
 </tr>
 <tr>
  <td>Description:</td>
  <td><textarea id="edit_desc" rows=5 cols=50 ><TMPL_VAR NAME=DESC></textarea></td>
 </tr>
 <tr>
  <td>Genome:</td>
  <td>
   <input id="edit_genome" onkeypress="wait_to_search(search_genomes);" size="50" value="<TMPL_VAR NAME=GENOME>">
   <span onClick="clear_edit_genome()" class="link ui-icon ui-icon-circlesmall-close"></span>
   <input id="edit_genome_id" type="hidden" value="<TMPL_VAR NAME=GENOME_ID>">
  </td>
 </tr>
 <tr>
  <td>Source:</td>
  <td>
   <input id="edit_source" size="53" value="<TMPL_VAR NAME=SOURCE>">
   <input id="edit_source_id" type="hidden" value="<TMPL_VAR NAME=SOURCE_ID>">
  </td>
 </tr>
 <tr>
  <td>Version:</td>
  <td><input id="edit_version" type="textbox" size="53" value="<TMPL_VAR NAME=VERSION>"></td>
 </tr>  
</table>
<br>
<span onClick="update_experiment_info();" class='ui-button ui-corner-all ui-button-go'>Update Experiment Info</span>
</TMPL_IF>



<TMPL_IF NAME=ADD_EXPERIMENT_TYPE>
<SCRIPT>
	$("#edit_type_name").autocomplete({
	    source: function() {
	    			get_experiment_types();
	    		},
	    select: function(event, ui) {
	    			get_type_description( ui.item.label );
	    		}
	});
</SCRIPT>
<table class="small">
 <tr>
  <td>Name:</td>
  <td><input id="edit_type_name" size="53" value="<TMPL_VAR NAME=NAME>"></td>
 </tr>
 <tr valign='top'>
  <td>Description:</td>
  <td><textarea id="edit_type_description" rows=5 cols=50 ><TMPL_VAR NAME=DESC></textarea></td>
 </tr>
</table>
<span onClick="add_type_to_experiment();" class='ui-button ui-corner-all ui-button-go'>Add</span>
</TMPL_IF>
