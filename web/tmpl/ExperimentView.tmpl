<TMPL_IF NAME=MAIN>
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.tablesorter.2.0.3.js"></SCRIPT>
<SCRIPT language="JavaScript" type="text/javascript" src="./js/jquery.tablesorter.pager.js"></SCRIPT>
<SCRIPT language="JavaScript">

$(document).ready(function(){
	//$('#experiment_table').tablesorter({		
	//	cssAsc: 'headerSortUp',		// Class name for ascending sorting action to header
	//	cssDesc: 'headerSortDown',	// Class name for descending sorting action to header
	//	//cssHeader: 'header',		// Class name for headers (th's)
	//	widgets: ['zebra'],
	//	headers: {0: {sorter: false},},					
	//});

	$.ajaxSetup({
	               type: "GET",
	               url: "ExperimentView.pl",
	               dataType: "html",
	               cache: false,
	});
	
	//$(".dialog_box").dialog({autoOpen: <TMPL_VAR NAME=EDIT_BOX_OPEN>, width: 600});
	$(".dialog_box").dialog({autoOpen: 0, width: 600});
});

//set up the jquery ui
$(function() {
	//substantiate dialog box	     
	$("#table_opts_dialog").dialog({ 
		height: 150,
		width: 627,
		autoOpen: false,
	});
		
	$("#save_form").dialog({
		autoOpen: false,
		height: 331,
		width: 461,
		buttons: {	
			"Cancel": function() { $(this).dialog("close"); },
			"Save": function() { 
				$.ajax({
					data: {
						jquery_ajax: 1,
						fname: 'add_to_user_history',
						work_name: $('#work_name').val(),
						description: $('#description').val(),
						url: document.location.href,
						note: $('#note').val(),
						archive: 1,
						tool: 'Experiment list'
					},
					success: function(val){}
				});
									
				$(this).dialog("close"); 
			}
		}
	});
	
	//button effects on events
	$('#table_opts').click(function() {
		$('#table_opts_dialog').dialog('open');
	});
	$('#history_dialog_button').click(function() {
		$('#save_form').dialog('open');
	});
});

function run_get_groups(opts){ //FIXME mdb 8/23/12 - is this still being used? if not remove
	if (!opts) { opts={}; }
	divid = opts.divid; //were results will be displayed in page
	expid = opts.expid;

	// create a new closure who's scope does *not*
	// include the `divid` value so that callback will 
	// not clobber the `divid` variable 
	var create_callback = function(divid) {
		var local_divid = divid;
		return function (data) {
			$('#'+local_divid).html(data);
		};
	}; 

	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_groups',
			expid: expid
		},
		success : create_callback(divid)
	});
}

function run_get_experiment_info(opts){
	if (!opts){opts={};}
	divid = opts.divid; //were results will be displayed in page
	// create a new closure who's scope does *not*
	// include the `divid` value so that callback will 
	// not clobber the `divid` variable 
	var create_callback = function(divid) {
		var local_divid = divid;
		return function (data) {
			$('#'+local_divid).html(data);
			//set_table();
		};
	}; 

	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_experiment_info',
			eid: eid
		},
		success : create_callback(divid)
	});
}

function remove_group (opts){
	ugid = opts.ugid;
	expid = opts.expid;
	if (ugid && expid) {
		$.ajax({
			data: {
				jquery_ajax: 1,
				fname: 'remove_group',
				ugid: ugid,
				expid: expid
			},
			success : function() {
				run_get_groups({divid: 'groups', expid: expid});
			},
		});
	}
}

function format_box_info (data) {
	output = data.output;
	return output;
}

function edit_experiment_info (opts) {
	eid = opts.eid;
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'edit_experiment_info',
			eid: eid,
		},
		success : function(data) {
			data = eval('('+data+')');
			title = data.title;
			$("#experiment_info_edit_box").dialog("option", "title", title);
			$("#experiment_info_edit_box").html(format_box_info(data));
			$("#experiment_info_edit_box").dialog('open');
			//setup_button_states();
		},
	});
}

function update_experiment_info (opts){
	name = $('#edit_name').val();
	if (!name) {
		alert('Error: Must have a name');
		return;
	}
	
	genome_id = parseInt( $('#edit_genome_id').val() );
	if (!genome_id) {
		alert('Error: Must be assigned to a genome');
		return;	
	}
	
	version = $('#edit_version').val();
	if (!version) {
		alert('Error: Must have a version');
		return;	
	}	
	
	source_id = parseInt( $('#edit_source_id').val() );
	if (!source_id) {
		alert('Error: Must have a source');
		return;	
	}	
	
	desc = $('#edit_desc').val();
	eid = opts.eid;
	
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'update_experiment_info',
			eid: eid,
			name: name,
			desc: desc,
			genome_id: genome_id,
			source_id: source_id,
			version: version
		},
		success : function(val) {
			$("#experiment_info_edit_box").dialog('close');
			run_get_experiment_info({divid: 'experiment_info', eid: eid});
		},
	});
}

function get_sources () {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_sources'
		},
		success : function(val) {
			var items = jQuery.parseJSON(val);
			$("#edit_source").autocomplete("option", "source", items);
			$("#edit_source").autocomplete("search");
		},
	});
}

function make_experiment_public (opts) {
	eid = opts.eid;
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'make_experiment_public',
			eid: eid,
		},
		success : function(val) {
			run_get_experiment_info({divid: 'experiment_info', eid: eid});
		}
	});
}

function make_experiment_private (opts) {
	eid = opts.eid;
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'make_experiment_private',
			eid: eid,
		},
		success : function(val) {
			run_get_experiment_info({divid: 'experiment_info', eid: eid});
		},
	});
}

function add_experiment_type (opts) {
	eid = opts.eid;
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'add_experiment_type',
			eid: eid,
		},
		success : function(data) {
			data = eval('('+data+')');
			title = data.title;
			$("#experiment_type_edit_box").dialog({
				title: title,
				beforeClose: 
					function() {
						$("#edit_type_name").autocomplete('close');
					}				
			});
			$("#experiment_type_edit_box").html(format_box_info(data));
			$("#experiment_type_edit_box").dialog('open');
			//setup_button_states();
		},
	});
}

function add_type_to_experiment (opts) {
	name = $('#edit_type_name').val();
	description = $('#edit_type_description').val();
	
	if (name) {
		eid = opts.eid;
		$.ajax({
			data: {
				jquery_ajax: 1,
				fname: 'add_type_to_experiment',
				eid: eid,
				name: name,
				description: description
			},
			success : function(val) {
				$("#experiment_type_edit_box").dialog('close');
				run_get_experiment_info({divid: 'experiment_info', eid: eid});
			},
		});
	}
	else { alert ('Error: Must have type name specified!');}
}

function remove_experiment_type (opts) {
	eid = opts.eid;
	etid = opts.etid;
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'remove_experiment_type',
			eid: eid,
			etid: etid,
		},
		success : function(val) {
			run_get_experiment_info({divid: 'experiment_info', eid: eid});
		},
	});
}

function add_experiment_annotation (opts) {
	eid = opts.eid;
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'add_experiment_annotation',
			eid: eid,
		},
		success : function(data) {
			data = eval('('+data+')');
			title = data.title;
			$("#experiment_annotation_edit_box").dialog({
				title: title,
				beforeClose: 
					function() {
						$("#edit_annotation_type").autocomplete('close');
						$("#edit_annotation_type_group").autocomplete('close');
					}
			});	
			$("#experiment_annotation_edit_box").html(format_box_info(data));
			$("#experiment_annotation_edit_box").dialog('open');
			//setup_button_states();
		},
	});
}

function add_annotation_to_experiment (opts) {
	annotation = $('#edit_annotation').val();
	type = $('#edit_annotation_type').val();
	
	if (annotation && type)
	{
		eid = opts.eid;
		type_group = $('#edit_annotation_type_group').val();
		link = 	$('#edit_link').val();
	
		$.ajax({
			data: {
				jquery_ajax: 1,
				fname: 'add_annotation_to_experiment',
				eid: eid,
				type_group: type_group,
				type: type,
				annotation: annotation,
				link: link
			},
			success : function(val) {
				$("#experiment_annotation_edit_box").dialog('close');
				run_get_experiment_annotations({divid: 'experiment_annotations', eid: eid});
			},
		});
	}
	else { alert ('Error: Must have type and annotation specified!');}
}

function run_get_experiment_annotations(opts) {
	if (!opts){opts={};}
	divid = opts.divid; //were results will be displayed in page
	// create a new closure who's scope does *not*
	// include the `divid` value so that callback will 
	// not clobber the `divid` variable 
	var create_callback = function(divid) {
		var local_divid = divid;
		return function (data) {
			$('#'+local_divid).html(data);
			//set_table();
		};
	}; 

	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_experiment_annotations',
			eid: eid
		},
		success : create_callback(divid)
	});
}

function remove_experiment_annotation (opts) {
	eid = opts.eid;
	eaid = opts.eaid;
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'remove_experiment_annotation',
			eid: eid,
			eaid: eaid,
		},
		success : function(val) {
			run_get_experiment_annotations({divid: 'experiment_annotations', eid: eid});
		},
	});
}

function wait_to_search (search_func) {
	if (pageObj.time) {
		clearTimeout(pageObj.time);
	}

	pageObj.time = setTimeout(function() { search_func(); }, 500);
}

function search_genomes () {
	search_term = $("#edit_genome").val();
	if (search_term.length > 2) {
		$.ajax({
			data: {
				jquery_ajax: 1,
				fname: 'search_genomes',
				search_term: search_term,
			},
			success : function(val) {
				var items = jQuery.parseJSON(val);
				$("#edit_genome").autocomplete("option", "source", items);
				$("#edit_genome").autocomplete("search");
			},
		});
	}
}

function clear_edit_genome() {
	$("#edit_genome").val('');
	$("#edit_genome_id").val(0);		
}

function get_experiment_types () {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_experiment_types'
		},
		success : function(val) {
			var items = jQuery.parseJSON(val);
			$("#edit_type_name").autocomplete("option", "source", items);
			$("#edit_type_name").autocomplete("search");
		},
	});
}

function get_type_description (name) {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_type_description',
			name: name
		},
		success : function(data) {
			$("#edit_type_description").html(data);
		},
	});
}

function search_annotation_types () {
	type_group  = $("#edit_annotation_type_group").val();
	search_term = $("#edit_annotation_type").val();
	if (search_term.length > 2) {
		$.ajax({
			data: {
				jquery_ajax: 1,
				fname: 'search_annotation_types',
				type_group: type_group,
				search_term: search_term,
			},
			success : function(val) {
				var items = jQuery.parseJSON(val);
				$("#edit_annotation_type").autocomplete("option", "source", items);
				$("#edit_annotation_type").autocomplete("search");
			},
		});
	}
}

function get_annotation_type_groups () {
	$.ajax({
		data: {
			jquery_ajax: 1,
			fname: 'get_annotation_type_groups'
		},
		success : function(val) {
			var items = jQuery.parseJSON(val);
			$("#edit_annotation_type_group").autocomplete("option", "source", items);
			$("#edit_annotation_type_group").autocomplete("search");
		},
	});
}
</SCRIPT>

<div>
 Experiment Info:<br>
 <div id='experiment_info'>
  <TMPL_VAR NAME=EXPERIMENT_INFO>
 </div>
</div>

<br>

<div>
 Experiment Annotations:<br>
 <div id="experiment_annotations">
  <TMPL_VAR NAME=EXPERIMENT_ANNOTATIONS>
 </div>
</div>

<div id="experiment_info_edit_box" class="dialog_box"></div>
<div id="experiment_type_edit_box" class="dialog_box"></div>
<div id="experiment_annotation_edit_box" class="dialog_box"></div>

</TMPL_IF> <!-- MAIN -->



<TMPL_IF NAME=EDIT_EXPERIMENT_INFO>
<SCRIPT>
	$("#edit_source").autocomplete({
	    source: 
	    	function() {
	    		get_sources();
	    	},
	    select:	
	    	function(event, ui) {
	    		$("#edit_source").val( ui.item.label );
	    		$("#edit_source_id").val( ui.item.value );
	    		return false;
	    	}
	});

	$("#edit_genome").autocomplete({
	    source: [],
	    select: 
	    	function(event, ui) {
	    		$("#edit_genome").val( ui.item.label );
	    		$("#edit_genome_id").val( ui.item.value );
	    		return false;
	    	}
	});
</SCRIPT>
<table class="small">
 <tr>
  <td>Name:</td>
  <td><input id="edit_name" type="textbox" size="53" value="<TMPL_VAR NAME=NAME>"></td>
 </tr>
 <tr>
  <td>Description:</td>
  <td><textarea id="edit_desc" rows=5 cols=50 ><TMPL_VAR NAME=DESC></textarea></td>
 </tr>
 <tr>
  <td>Genome:</td>
  <td>
   <input id="edit_genome" onkeypress="wait_to_search(search_genomes);" size="50" value="<TMPL_VAR NAME=GENOME>">
   <span onClick="clear_edit_genome()" class="link ui-icon ui-icon-circlesmall-close"></span>
   <input id="edit_genome_id" type="hidden" value="<TMPL_VAR NAME=GENOME_ID>">
  </td>
 </tr>
 <tr>
  <td>Source:</td>
  <td>
   <input id="edit_source" size="53" value="<TMPL_VAR NAME=SOURCE>">
   <input id="edit_source_id" type="hidden" value="<TMPL_VAR NAME=SOURCE_ID>">
  </td>
 </tr>
 <tr>
  <td>Version:</td>
  <td><input id="edit_version" type="textbox" size="53" value="<TMPL_VAR NAME=VERSION>"></td>
 </tr>  
</table>
<br>
<span onClick="update_experiment_info({eid: '<TMPL_VAR NAME=EID>'});" class='ui-button ui-corner-all ui-button-go'>Update Experiment Info</span>
</TMPL_IF>



<TMPL_IF NAME=ADD_EXPERIMENT_TYPE>
<SCRIPT>
	$("#edit_type_name").autocomplete({
	    source: function() {
	    			get_experiment_types();
	    		},
	    select: function(event, ui) {
	    			get_type_description( ui.item.label );
	    		}
	});
</SCRIPT>
<table class="small">
 <tr>
  <td>Name:</td>
  <td><input id="edit_type_name" size="53" value="<TMPL_VAR NAME=NAME>"></td>
 </tr>
 <tr valign='top'>
  <td>Description:</td>
  <td><textarea id="edit_type_description" rows=5 cols=50 ><TMPL_VAR NAME=DESC></textarea></td>
 </tr>
</table>
<span onClick="add_type_to_experiment({eid: '<TMPL_VAR NAME=EID>'});" class='ui-button ui-corner-all ui-button-go'>Add</span>
</TMPL_IF>



<TMPL_IF NAME=ADD_EXPERIMENT_ANNOTATION> <!-- FIXME: this is redundant with ListView.tmpl, move into own sub-template? -->
<SCRIPT>
	$("#edit_annotation_type_group").autocomplete({
	    source: function() {
	    			get_annotation_type_groups();
	    		}
	});
	
	$("#edit_annotation_type").autocomplete({
	    source: []
	});
</SCRIPT>
<table class="small">
 <tr valign='top'>
  <td>Annotation:</td>
  <td><textarea id="edit_annotation" rows=5 cols=50 ><TMPL_VAR NAME=ANNOTATION></textarea></td>
 </tr>
 <tr>
  <td>Link:</td>
  <td><input id="edit_link" type="textbox" size="53" value="<TMPL_VAR NAME=LINK>"></td>
 </tr>
 <tr>
  <td>Type:</td>
  <td><input id="edit_annotation_type" onkeypress="wait_to_search(search_annotation_types);" size="53" value="<TMPL_VAR NAME=DEFAULT_TYPE>"></td>
 </tr>
 <tr>
  <td>Type Group:</td>
  <td><input id="edit_annotation_type_group" size="53"> (optional)</td>
 </tr>
</table>
<span onClick="add_annotation_to_experiment({eid: '<TMPL_VAR NAME=EID>'});" class='ui-button ui-corner-all ui-button-go'>Add</span>
</TMPL_IF>
